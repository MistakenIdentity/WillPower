<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WillPower.Common</name>
    </assembly>
    <members>
        <member name="T:WillPower.Extensions">
            <summary>
            Container for extension methods.
            Mostly shortcuts and parsing methods for common thingies.
            </summary>
        </member>
        <member name="M:WillPower.Extensions.Remove(System.String,System.String)">
            <summary>
            Removes the provided <see cref="T:System.String">string</see> from the <see cref="T:System.String">value</see>.
            </summary>
            <param name="value">The <see cref="T:System.String">string</see> to evaluate.</param>
            <param name="remove">The <see cref="T:System.String">string</see> to remove.</param>
            <returns>The <see cref="T:System.String">value</see> without the removed <see cref="T:System.String">string</see>.</returns>
        </member>
        <member name="M:WillPower.Extensions.Only(System.String,System.Char[])">
            <summary>
            Returns a <see cref="T:System.String">string</see> containing only the <see cref="T:System.Char">characters</see> specified.
            </summary>
            <param name="value">The <see cref="T:System.String">string</see> to evaluate.</param>
            <param name="chars">The <see cref="T:System.Collections.ICollection">collection</see> or allowable <see cref="T:System.Char">characters</see>.</param>
            <returns>A <see cref="T:System.String">string</see> containing only the <see cref="T:System.Char">characters</see> specified.</returns>
        </member>
        <member name="M:WillPower.Extensions.IsSimpleType(System.Object)">
            <summary>
            Determines if the <see cref="T:System.Object">object</see> is of a simple <see cref="T:System.Type">type</see>.
            </summary>
            <param name="value">The <see cref="T:System.Object">object</see> to evaluate.</param>
            <returns><see cref="T:System.Boolean">True</see> if the <see cref="T:System.Object">object</see> is not of a complex 
            <see cref="T:System.Type">type</see>.</returns>
        </member>
        <member name="M:WillPower.Extensions.NumbersOnly(System.String,System.Boolean)">
            <summary>
            Returns a <see cref="T:System.String">string</see> containing only the numbers and, optionally, one decimal 
            (.) (the first encountered) from the value.
            </summary>
            <param name="value">The <see cref="T:System.String">string</see> to parse.</param>
            <param name="allowDecimal">If <see cref="T:System.Boolean">true</see> will allow a single '.' (the first encountered). 
            Default is <see cref="T:System.Boolean">false</see>.</param>
            <returns>A <see cref="T:System.String">string</see> containing only the numbers and, optionally, one decimal (.) 
            (the first encountered) from the value.</returns>
        </member>
        <member name="M:WillPower.Extensions.IsNumeric(System.String,System.Boolean)">
            <summary>
            Returns <see cref="T:System.Boolean">true</see> if all characters in the string are digits and,
            if allowDecimal is <see cref="T:System.Boolean">true</see>, only one '.' exists.
            </summary>
            <param name="value">The <see cref="T:System.String">string</see> to evaluate.</param>
            <param name="allowDecimal">If <see cref="T:System.Boolean">true</see> will allow a single '.' (the first encountered). 
            Default is <see cref="T:System.Boolean">false</see>.</param>
            <returns>
            <see cref="T:System.Boolean">True</see> if all characters are numbers and, optionally, only one decimal (.) exists.
            </returns>
        </member>
        <member name="M:WillPower.Extensions.Convert(System.Byte[],System.Text.Encoding,System.Text.Encoding)">
            <summary>
            Converts the byte <see cref="T:System.Array">array</see> from the provided source <see cref="T:System.Text.Encoding">Encoding</see> 
            to the optional destination <see cref="T:System.Text.Encoding">Encoding</see> or <see cref="P:System.Text.Encoding.UTF8">UTF8</see> 
            as a byte <see cref="T:System.Array">array</see>.
            </summary>
            <param name="value">The <see cref="T:System.Array">array</see> of bytes to evaluate.</param>
            <param name="sourceEncoding">The <see cref="T:System.Text.Encoding">Encoding</see> scheme of the bytes provided.</param>
            <param name="destinationEncoding">The <see cref="T:System.Text.Encoding">Encoding</see> scheme of the bytes expected.</param>
            <returns>The resulting byte <see cref="T:System.Array">array</see>.</returns>
        </member>
        <member name="M:WillPower.Extensions.ToEncodedString(System.Byte[],System.Text.Encoding,System.Text.Encoding)">
            <summary>
            Converts the byte <see cref="T:System.Array">array</see> from the provided source <see cref="T:System.Text.Encoding">Encoding</see> 
            to the optional destination <see cref="T:System.Text.Encoding">Encoding</see> or <see cref="P:System.Text.Encoding.UTF8">UTF8</see> as string.
            </summary>
            <param name="value">The <see cref="T:System.Array">array</see> of bytes to evaluate.</param>
            <param name="sourceEncoding">The <see cref="T:System.Text.Encoding">Encoding</see> scheme of the bytes provided.</param>
            <param name="destinationEncoding">The <see cref="T:System.Text.Encoding">Encoding</see> scheme of the bytes expected.</param>
            <returns>
            The string <see cref="T:System.Text.Encoding">encoded</see> as <see cref="T:System.Text.Encoding">destinationEncdoing</see> 
            or <see cref="P:System.Text.Encoding.UTF8">UTF8</see>.
            </returns>
        </member>
        <member name="M:WillPower.Extensions.Raise(System.Decimal,System.Double)">
            <summary>
            A shortcut method to implement <see cref="M:System.Math.Pow(System.Double,System.Double)">System.Math.Pow</see> for decimal values.
            </summary>
            <param name="value">The <see cref="T:System.Decimal">decimal</see> value.</param>
            <param name="exponent">The exponent expressed as <see cref="T:System.Double">double</see>.</param>
            <returns>The resultant as <see cref="T:System.Decimal">decimal</see>.</returns>
        </member>
        <member name="M:WillPower.Extensions.AsInt(System.Decimal)">
            <summary>
            quickly converts a <see cref="T:System.Decimal">decimal</see> to the <see cref="M:WillPower.Extensions.Round(System.Decimal,System.Double)">rounded</see> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal">decimal</see> value.</param>
            <returns>The value as <see cref="T:System.Int32">int</see>.</returns>
        </member>
        <member name="M:WillPower.Extensions.ToTheCent(System.Decimal)">
            <summary>
            Rounds to the <see cref="T:System.Decimal">decimal</see> value at the hundredths (10 to the 2nd, or a precision of 2). 
            See <seealso cref="M:WillPower.Extensions.Round(System.Decimal,System.Double)">Round()</seealso>
            </summary>
            <param name="value">The <see cref="T:System.Decimal">decimal</see> value.</param>
            <returns>The <see cref="T:System.Decimal">decimal</see> rounded value.</returns>
            <seealso cref="M:WillPower.Extensions.Round(System.Decimal,System.Double)"/>
        </member>
        <member name="M:WillPower.Extensions.ToTheHighCent(System.Decimal)">
            <summary>
            Rounds to the highest <see cref="T:System.Decimal">decimal</see> value at the hundredths (10 to the 2nd, or a precision of 2). 
            See <seealso cref="M:WillPower.Extensions.RoundUp(System.Decimal,System.Double)">RoundUp()</seealso>
            </summary>
            <param name="value">The <see cref="T:System.Decimal">decimal</see> value.</param>
            <returns>The <see cref="T:System.Decimal">decimal</see> rounded up.</returns>
            <seealso cref="M:WillPower.Extensions.RoundUp(System.Decimal,System.Double)"/>
        </member>
        <member name="M:WillPower.Extensions.ToTheLowCent(System.Decimal)">
            <summary>
            Rounds to the lowest <see cref="T:System.Decimal">decimal</see> value at the hundredths (10 to the 2nd, or a precision of 2). 
            See <seealso cref="M:WillPower.Extensions.RoundDown(System.Decimal,System.Double)">RoundDown()</seealso>
            </summary>
            <param name="value">The <see cref="T:System.Decimal">decimal</see> value.</param>
            <returns>The <see cref="T:System.Decimal">decimal</see> rounded down.</returns>
        </member>
        <member name="M:WillPower.Extensions.Round(System.Decimal,System.Double)">
            <summary>
            Rounds to the <see cref="T:System.Decimal">decimal</see> value at the provided precision value (or 0). 
            If desired for currency, use <see cref="M:WillPower.Extensions.ToTheCent(System.Decimal)">ToTheCent()</see> instead.
            </summary>
            <param name="value">The <see cref="T:System.Decimal">decimal</see> value.</param>
            <param name="precision">The <see cref="T:System.Double">precision</see> to apply to the decimal value.</param>
            <returns>The <see cref="T:System.Decimal">decimal</see> rounded value.</returns>
        </member>
        <member name="M:WillPower.Extensions.RoundUp(System.Decimal,System.Double)">
            <summary>
            Rounds to the highest <see cref="T:System.Decimal">decimal</see> value at the provided precision value (or 0). 
            If desired for currency, use <see cref="M:WillPower.Extensions.ToTheHighCent(System.Decimal)">ToTheHighCent()</see> instead.
            </summary>
            <param name="value">The <see cref="T:System.Decimal">decimal</see> value.</param>
            <param name="precision">The <see cref="T:System.Double">precision</see> to apply to the decimal value.</param>
            <returns>The <see cref="T:System.Decimal">decimal</see> rounded up.</returns>
        </member>
        <member name="M:WillPower.Extensions.RoundDown(System.Decimal,System.Double)">
            <summary>
            Rounds to the lowest <see cref="T:System.Decimal">decimal</see> value at the provided precision value (or 0). 
            If desired for currency, use <see cref="M:WillPower.Extensions.ToTheLowCent(System.Decimal)">ToTheLowCent()</see> instead.
            </summary>
            <param name="value">The <see cref="T:System.Decimal">decimal</see> value.</param>
            <param name="precision">The <see cref="T:System.Double">precision</see> to apply to the decimal value.</param>
            <returns>The <see cref="T:System.Decimal">decimal</see> rounded down.</returns>
        </member>
        <member name="M:WillPower.Extensions.Century(System.DateTime)">
            <summary>
            Returns the Century of the <see cref="T:System.DateTime">System.DateTime</see> as an <see cref="T:System.Int32">int</see>.
            </summary>
            <param name="value">The <see cref="T:System.DateTime">System.DateTime</see> value</param>
            <returns>The Century as an <see cref="T:System.Int32">int</see>.</returns>
        </member>
        <member name="M:WillPower.Extensions.PascalCased(System.String)">
            <summary>
            Returns a sentence (or a single word) as pascal-cased ("Mr. George Willington Gracey Esq." is an example of pascal casing).
            </summary>
            <param name="value">The <see cref="T:System.String">string</see> value to evaluate.</param>
            <returns>The <see cref="T:System.String">string</see> value pascal-cased.</returns>
        </member>
        <member name="M:WillPower.Extensions.Capitalize(System.String)">
            <summary>
            Shifts any first character of the string to UpperInvariant and any remaining characters ToLowerInvariant.
            </summary>
            <param name="value">The <see cref="T:System.String">string</see> value to evaluate.</param>
            <returns>The reformatted <see cref="T:System.String">string</see>.</returns>
        </member>
        <member name="M:WillPower.Extensions.ToByteArray(System.Object,System.Text.Encoding)">
            <summary>
            Converts an <see cref="T:System.Object">object</see> to an <see cref="T:System.Array">array</see> of bytes.
            </summary>
            <param name="value">The <see cref="T:System.Object">object</see> to evaluate.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding">Encoding</see> scheme of the bytes expected or 
            <see cref="P:System.Text.Encoding.UTF8">UTF8</see>.</param>
            <returns>The resulting <see cref="T:System.Array">array</see> of bytes.</returns>
        </member>
        <member name="M:WillPower.Extensions.ToObject(System.Byte[])">
            <summary>
            Converts an <see cref="T:System.Array">array</see> of bytes to an <see cref="T:System.Object">object</see>.
            </summary>
            <param name="value">The <see cref="T:System.Array">array</see> of bytes to evaluate.</param>
            <returns>The resulting <see cref="T:System.Object">object</see>.</returns>
        </member>
        <member name="M:WillPower.Extensions.ToObject``1(System.Byte[])">
            <summary>
            Converts an <see cref="T:System.Array">array</see> of bytes to the specified <see cref="T:System.Type">type</see>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type">type</see> of return object.</typeparam>
            <param name="value">The <see cref="T:System.Array">array</see> of bytes to evaluate.</param>
            <returns>The object as <see cref="T:System.Type">T</see>.</returns>
        </member>
        <member name="M:WillPower.Extensions.ToBool(System.String)">
            <summary>
            Converts the string to a <see cref="T:System.Boolean">bool</see> or null.
            </summary>
            <param name="value">The <see cref="T:System.String">string</see> value to evaluate.</param>
            <returns><see cref="T:System.Boolean">Boolean</see> or null.</returns>
        </member>
        <member name="M:WillPower.Extensions.ToDateTime(System.String,System.Boolean)">
            <summary>
            Converts the string to a <see cref="T:System.DateTime">System.DateTime</see> or null.
            </summary>
            <param name="value">The <see cref="T:System.String">string</see> value to evaluate.</param>
            <param name="yearFirst">If <see cref="T:System.Boolean">true</see> it assumes the year is the first part of the string. 
            Default is <see cref="T:System.Boolean">false</see>.
            Note: If the <see cref="T:System.String">string</see> contains a parsable date character ( / or - ) it will attempt to use 
            <see cref="M:System.DateTime.TryParse(System.String,System.DateTime@)">TryParse</see> and return any successful result. 
            If <see cref="M:System.DateTime.TryParse(System.String,System.DateTime@)">TryParse</see> fails it proceeds on to 
            <see cref="T:System.String">string</see> parsing.
            </param>
            <returns><see cref="T:System.DateTime">System.DateTime</see> or null.</returns>
        </member>
        <member name="M:WillPower.Extensions.ToInt(System.UInt32)">
            <summary>
            Converts an <see cref="T:System.UInt32">unsigned integer</see> to a <see cref="T:System.Int32">signed integer</see>.
            If the <see cref="T:System.UInt32">unsigned integer</see> is greater than <see cref="F:System.Int32.MaxValue">int.MaxValue</see> it will return
            a negative <see cref="T:System.Int32">integer</see> starting at -1 for each value greater than <see cref="F:System.Int32.MaxValue">int.MaxValue</see>.
            I.e., int.MaxValue + 1 returns -1, int.MaxValue + 2 returns -2, int.MaxValue + 3 returns -3, and so forth.
            <code>
            public static int ToInt(this uint value)
            {
                if (value > int.MaxValue)
                {
                    return <seealso cref="M:System.Convert.ToInt32(System.Int32)">System.Convert.ToInt32</seealso>((value - int.MaxValue) * -1);
                }
                return <seealso cref="M:System.Convert.ToInt32(System.Int32)">System.Convert.ToInt32</seealso>(value);
            }
            </code>
            </summary>
            <param name="value">The <see cref="T:System.UInt32">unsigned integer</see> to evaluate.</param>
            <returns>The resulting <see cref="T:System.Int32">signed integer</see>.</returns>
        </member>
        <member name="M:WillPower.Extensions.ToUInt(System.Int32)">
            <summary>
            Converts a <see cref="T:System.Int32">signed integer</see> to an <see cref="T:System.UInt32">unsigned integer</see>.
            If the <see cref="T:System.Int32">signed integer</see> is negative then it will return
            a value greater than <see cref="F:System.Int32.MaxValue">int.MaxValue</see> starting at +1 for each value below 0.
            I.e., -1 returns int.MaxValue + 1, -2 returns int.MaxValue + 2, -3 returns int.MaxValue + 3, and so forth.
            <code>
            public static uint ToUInt(this int value)
            {
                return value <![CDATA[<]]> 0 
                    ? <seealso cref="M:System.Convert.ToUInt32(System.Int32)">System.Convert.ToUInt32</seealso>(int.MaxValue + System.Math.Abs(value)) 
                    : <seealso cref="M:System.Convert.ToUInt32(System.Int32)">System.Convert.ToUInt32</seealso>(value);
            }
            </code>
            </summary>
            <param name="value">The <see cref="T:System.Int32">signed integer</see> to evaluate.</param>
            <returns>The resulting <see cref="T:System.UInt32">unsigned integer</see>.</returns>
        </member>
        <member name="M:WillPower.Extensions.MaximumConcurrency(System.Threading.Tasks.TaskFactory)">
            <summary>
            Returns the default <see cref="T:System.Threading.Tasks.TaskScheduler">TaskScheduler</see> of the <see cref="T:System.Threading.Tasks.TaskFactory"> 
            TaskFactory's</see> <see cref="P:System.Threading.Tasks.TaskScheduler.MaximumConcurrencyLevel">MaximumConcurrencyLevel</see> 
            as an <see cref="T:System.UInt32">unsigned integer</see>.
            <code>
            public static uint MaximumConcurrency(this System.Threading.Tasks.TaskFactory value)
            {
                return (value?.<see cref="P:System.Threading.Tasks.TaskFactory.Scheduler">Scheduler</see>?
                    .MaximumConcurrencyLevel ?? 0).<see cref="M:WillPower.Extensions.ToUInt(System.Int32)">ToUInt()</see>;
            }
            </code>
            </summary>
            <param name="value">The <see cref="T:System.Threading.Tasks.TaskFactory">TaskFactory</see> to evaluate.</param>
            <returns>
            The resulting <see cref="T:System.Int32">signed integer</see> as an <see cref="T:System.UInt32">unsigned integer</see>.
            </returns>
        </member>
        <member name="M:WillPower.Extensions.CastAs``1(System.Object)">
            <summary>
            Evaulates an <see cref="T:System.Object">object</see> for null and returns default if null (for <see cref="T:System.Nullable">nullable</see> 
            <see cref="T:System.Type">types</see> this could be null or a default value). For all other <see cref="T:System.Type">types</see> it returns 
            the default of the <see cref="T:System.Type">type (T)</see> provided.
            If not null, will attempt a <see href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/types/casting-and-type-conversions">
            direct cast</see> to <see cref="T:System.Type">type (T)</see>.
            <code>
            public static T CastAs<![CDATA[<T>]]>(this object value)
            {
                if (value == null)
                {
                    return default;
                }
                return (T)value;
            }
            </code>
            </summary>
            <typeparam name="T">The <see cref="T:System.Type">type</see> of return object.</typeparam>
            <param name="value">The <see cref="T:System.Object">object</see> to cast.</param>
            <returns>The value as <see cref="T:System.Type">T</see> or default.</returns>
        </member>
        <member name="M:WillPower.Extensions.GotoStart(System.IO.Stream)">
            <summary>
            If possible, positions the pointer to the beginning of the stream without throwing an error.
            </summary>
            <param name="value">The <see cref="T:System.IO.Stream">System.IO.Stream</see>.</param>
        </member>
        <member name="M:WillPower.Extensions.DivideInto(System.String,System.UInt32)">
            <summary>
            Divides the long <see cref="T:System.String">string</see> into an <see cref="T:System.Array">array</see> of 
            <see cref="T:System.String">strings</see> of a length of groupOf.
            </summary>
            <param name="value">The <see cref="T:System.String">string</see> to evaluate.</param>
            <param name="groupsOf">The <see cref="T:System.UInt32">number</see> of <see cref="T:System.Char">characters</see> 
            for each <see cref="T:System.String">string</see> in the <see cref="T:System.Array">array</see>.</param>
            <returns>An <see cref="T:System.Array">array</see> of <see cref="T:System.String">strings</see> of a length of groupOf.</returns>
        </member>
        <member name="M:WillPower.Extensions.AsString(System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Restores an <see cref="T:System.Array">array</see> of <see cref="T:System.Char">characters</see> to a <see cref="T:System.String">string</see>.
            </summary>
            <param name="value">The <see cref="T:System.Array">array</see> of <see cref="T:System.Char">characters</see> to evaluate.</param>
            <returns>The resulting <see cref="T:System.String">string</see>.</returns>
        </member>
        <member name="T:WillPower.AbortableTask">
            <summary>
            A simple container for handling <see cref="T:System.Threading.Tasks.Task">Task</see> cancellation.
            Inherits <see cref="T:System.Threading.Tasks.Task">System.Threading.Tasks.Task</see>.
            </summary>
        </member>
        <member name="P:WillPower.AbortableTask.Task">
            <summary>
            The root <see cref="T:System.Threading.Tasks.Task">Task</see>.
            </summary>
        </member>
        <member name="P:WillPower.AbortableTask.CancellationTokenSource">
            <summary>
            The <see cref="T:System.Threading.CancellationTokenSource">source</see> of the <see cref="T:System.Threading.CancellationToken">CancellationToken</see>.
            </summary>
        </member>
        <member name="P:WillPower.AbortableTask.CancellationToken">
            <summary>
            The <see cref="T:System.Threading.CancellationToken">CancellationToken</see>.
            </summary>
        </member>
        <member name="M:WillPower.AbortableTask.#ctor(System.Action,System.Threading.CancellationTokenSource)">
            <summary>
            .ctor. Creates a new Instance of AbortableTask.
            </summary>
            <param name="action">The <see cref="T:System.Action">action</see> to be executed.</param>
            <param name="tokenSource">The <see cref="T:System.Threading.CancellationTokenSource">source</see> 
            of the <see cref="T:System.Threading.CancellationToken">CancellationToken</see>.</param>
        </member>
        <member name="M:WillPower.AbortableTask.#ctor(System.Action)">
            <summary>
            .ctor. Creates a new Instance of AbortableTask.
            </summary>
            <param name="action">The <see cref="T:System.Action">action</see> to be executed.</param>
        </member>
        <member name="M:WillPower.AbortableTask.Abort">
            <summary>
            Invokes Cancel on the <see cref="T:System.Threading.CancellationTokenSource">CancellationTokenSource</see>.
            </summary>
        </member>
        <member name="M:WillPower.AbortableTask.Dispose">
            <summary>
            Disposes of this instance.
            </summary>
        </member>
        <member name="T:WillPower.Encodings">
            <summary>
            A container for uncommonly used <see cref="T:System.Text.Encoding">Encodings</see>.
            </summary>
        </member>
        <member name="P:WillPower.Encodings.EBCDIC">
            <summary>
            The EBCDIC <see cref="T:System.Text.Encoding">Encoding</see> for easy reference. 
            This is usually the <see href="https://www.ibm.com/support/knowledgecenter/SSEQ5Y_5.9.0/com.ibm.pcomm.doc/reference/pdf/hcp_referenceV58.pdf">
            IBM 037</see> code page in .Net.
            Default is CodePage IBM037.
            </summary>
        </member>
        <member name="P:WillPower.Encodings.ANSI">
            <summary>
            ANSI (Default) <see cref="T:System.Text.Encoding">Encoding</see> for easy reference. 
            </summary>
        </member>
        <member name="T:WillPower.TaskManager">
            <summary>
            A class for managing active tasks without any complex magic.
            Why isn't something like this part of .Net?
            Can be inherited because I was too lazy to make an Interface.
            </summary>
        </member>
        <member name="T:WillPower.TaskManager.OnThreadExceptionHandler">
            <summary>
            The delegate handler for <see cref="E:WillPower.TaskManager.OnThreadException">OnThreadException</see>.
            </summary>
            <param name="sender"><see cref="T:WillPower.TaskManager">This</see> instance.</param>
            <param name="exception">The <see cref="T:System.Exception">Exception</see> thrown.</param>
            <param name="action">The relevant <see cref="T:WillPower.AbortableTask">AbortableTask</see>, if any.</param>
        </member>
        <member name="E:WillPower.TaskManager.OnThreadException">
            <summary>
            Fires when a <see cref="P:WillPower.TaskManager.PendingTasks">Pending Task</see> is fails to execute.
            If this event is not handled, an unhandled <see cref="T:System.Exception">Exception</see> could 
            be thrown in the background thread and should be handled elsewhere.
            </summary>
        </member>
        <member name="P:WillPower.TaskManager.TimeOut">
            <summary>
            The <see cref="T:System.TimeSpan">System.TimeSpan</see> to wait for an available thread prior to throwing a 
            <see cref="T:System.TimeoutException">TimeoutException</see>.
            Default is 10 seconds.
            </summary>
        </member>
        <member name="P:WillPower.TaskManager.TimeOutAll">
            <summary>
            The <see cref="T:System.TimeSpan">System.TimeSpan</see> to wait for all threads to complete prior to throwing a 
            <see cref="T:System.TimeoutException">TimeoutException</see>.
            Default is 1 hour (60 minutes).
            </summary>
        </member>
        <member name="P:WillPower.TaskManager.MaximumConcurrency">
            <summary>
            The default <see cref="T:System.Threading.Tasks.TaskScheduler">TaskScheduler</see> of the 
            <see cref="T:System.Threading.Tasks.TaskFactory">TaskFactory's</see> <see cref="P:System.Threading.Tasks.TaskScheduler.MaximumConcurrencyLevel">
            MaximumConcurrencyLevel</see> as an <see cref="T:System.UInt32">unsigned integer</see>.
            </summary>
        </member>
        <member name="P:WillPower.TaskManager.TaskFactory">
            <summary>
            The <see cref="P:WillPower.TaskManager.TaskFactory">System.Threading.Tasks.TaskFactory</see> instance used for instantiating tasks.
            </summary>
        </member>
        <member name="P:WillPower.TaskManager.Tasks">
            <summary>
            The <see cref="T:System.Collections.Generic.List`1">collection</see> of <see cref="T:WillPower.AbortableTask">Tasks</see> currently loaded.
            </summary>
        </member>
        <member name="P:WillPower.TaskManager.CanceledTasks">
            <summary>
            The <see cref="T:System.Collections.Generic.List`1">collection</see> of <see cref="T:WillPower.AbortableTask">Tasks</see> with a Canceled status.
            </summary>
        </member>
        <member name="P:WillPower.TaskManager.FaultedTasks">
            <summary>
            The <see cref="T:System.Collections.Generic.List`1">collection</see> of <see cref="T:WillPower.AbortableTask">Tasks</see> with a Faulted status.
            </summary>
        </member>
        <member name="P:WillPower.TaskManager.CompletedTasks">
            <summary>
            The <see cref="T:System.Collections.Generic.List`1">collection</see> of <see cref="T:WillPower.AbortableTask">Tasks</see> with a Completed status.
            </summary>
        </member>
        <member name="P:WillPower.TaskManager.RunningTasks">
            <summary>
            The <see cref="T:System.Collections.Generic.List`1">collection</see> of <see cref="T:WillPower.AbortableTask">Tasks</see> with a Running status.
            </summary>
        </member>
        <member name="P:WillPower.TaskManager.PendingTasks">
            <summary>
            The <see cref="T:System.Collections.Generic.List`1">List</see> of <see cref="T:WillPower.AbortableTask">Tasks</see> awaiting execution.
            </summary>
        </member>
        <member name="P:WillPower.TaskManager.HasActiveTasks">
            <summary>
            Returns <see cref="T:System.Boolean">true</see> if <see cref="P:WillPower.TaskManager.RunningTasks">RunningTasks</see> has one or more items.
            </summary>
        </member>
        <member name="M:WillPower.TaskManager.#ctor">
            <summary>
            .ctor. Creates a new instance of TaskManager.
            </summary>
        </member>
        <member name="M:WillPower.TaskManager.StartAction(System.Action)">
            <summary>
            Starts the <see cref="T:System.Action">action</see> using <see cref="P:WillPower.TaskManager.TaskFactory">TaskFactory</see> 
            and adds it to the <see cref="P:WillPower.TaskManager.Tasks">Tasks</see> collection or the 
            <see cref="P:WillPower.TaskManager.PendingTasks">PendingTasks</see> collection if no threads are available.
            </summary>
            <param name="action">The <see cref="T:System.Action">action</see> to be executed.</param>
        </member>
        <member name="M:WillPower.TaskManager.StartAction(System.Action,System.Threading.CancellationTokenSource)">
            <summary>
            Starts the <see cref="T:System.Action">action</see> using <see cref="P:WillPower.TaskManager.TaskFactory">TaskFactory</see> 
            and adds it to the <see cref="P:WillPower.TaskManager.Tasks">Tasks</see> collection or the 
            <see cref="P:WillPower.TaskManager.PendingTasks">PendingTasks</see> collection if no threads are available
            using the provided <see cref="T:System.Threading.CancellationTokenSource">CancellationTokenSource</see>.
            </summary>
            <param name="action">The <see cref="T:System.Action">action</see> to be executed.</param>
            <param name="cancellationTokenSource">The <see cref="T:System.Threading.CancellationTokenSource">source</see> of the <see cref="T:System.Threading.CancellationToken">CancellationToken</see>.</param>
        </member>
        <member name="M:WillPower.TaskManager.StartTask(WillPower.AbortableTask)">
            <summary>
            Starts the <see cref="T:WillPower.AbortableTask">Task</see> using <see cref="P:WillPower.TaskManager.TaskFactory">TaskFactory</see> 
            and adds it to the <see cref="P:WillPower.TaskManager.Tasks">Tasks</see> collection or the 
            <see cref="P:WillPower.TaskManager.PendingTasks">PendingTasks</see> collection if no threads are available.
            </summary>
            <param name="task"></param>
        </member>
        <member name="M:WillPower.TaskManager.StartTask(System.Threading.Tasks.Task)">
            <summary>
            Starts the <see cref="T:System.Threading.Tasks.Task">Task</see> using <see cref="P:WillPower.TaskManager.TaskFactory">TaskFactory</see> 
            and adds it to the <see cref="P:WillPower.TaskManager.Tasks">Tasks</see> collection or the 
            <see cref="P:WillPower.TaskManager.PendingTasks">PendingTasks</see> collection if no threads are available.
            </summary>
            <param name="task">The <see cref="T:System.Threading.Tasks.Task">Task</see> to be executed.</param>
        </member>
        <member name="M:WillPower.TaskManager.StartTask(System.Threading.Tasks.Task,System.Threading.CancellationTokenSource)">
            <summary>
            Starts the <see cref="T:System.Threading.Tasks.Task">Task</see> using <see cref="P:WillPower.TaskManager.TaskFactory">TaskFactory</see> 
            and adds it to the <see cref="P:WillPower.TaskManager.Tasks">Tasks</see> collection or the 
            <see cref="P:WillPower.TaskManager.PendingTasks">PendingTasks</see> collection if no threads are available
            using the provided <see cref="T:System.Threading.CancellationTokenSource">CancellationTokenSource</see>.
            </summary>
            <param name="task">The <see cref="T:System.Threading.Tasks.Task">Task</see> to be executed.</param>
            <param name="cancellationTokenSource">The <see cref="T:System.Threading.CancellationTokenSource">source</see> of the <see cref="T:System.Threading.CancellationToken">CancellationToken</see>.</param>
        </member>
        <member name="M:WillPower.TaskManager.CleanTasks">
            <summary>
            Removes all <see cref="P:WillPower.TaskManager.Tasks">Tasks</see> that are no longer running.
            </summary>
        </member>
        <member name="M:WillPower.TaskManager.AwaitAll">
            <summary>
            Awaits all tasks (or <see cref="P:WillPower.TaskManager.TimeOutAll">TimeOutAll</see> elapses).
            </summary>
        </member>
        <member name="M:WillPower.TaskManager.AwaitAllThenClean">
            <summary>
            Awaits all tasks (or <see cref="P:WillPower.TaskManager.TimeOutAll">TimeOutAll</see> elapses) and removes them from the 
            <see cref="P:WillPower.TaskManager.Tasks">Tasks</see> collection.
            See <see cref="M:WillPower.TaskManager.AwaitAll">AwaitAll</see> and <see cref="M:WillPower.TaskManager.CleanTasks">CleanTasks</see>.
            </summary>
        </member>
        <member name="M:WillPower.TaskManager.Dispose">
            <summary>
            Safely <see cref="T:System.IDisposable">Disposes</see> of this instance and all child <see cref="T:WillPower.AbortableTask">Tasks</see>.
            </summary>
        </member>
        <member name="T:WillPower.Common.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:WillPower.Common.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:WillPower.Common.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:WillPower.Common.Properties.Resources.ThreadNotAvailable">
            <summary>
              Looks up a localized string similar to The timeout was exceeded before a thread became available..
            </summary>
        </member>
    </members>
</doc>
