<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WillPower.IO.FileParser</name>
    </assembly>
    <members>
        <member name="T:WillPower.FileFieldBase">
            <summary>
            A common base class containing the necessary properties and methods for processing a single field.
            Must be inherited.
            </summary>
        </member>
        <member name="P:WillPower.FileFieldBase.Encoder">
            <summary>
            The <see cref="T:WillPower.IFileParserEncoder">IFileParserEncoder</see> instance to use for encoding.
            </summary>
        </member>
        <member name="P:WillPower.FileFieldBase.StartPosition">
            <summary>
            The starting position of this field in the <see cref="T:WillPower.IFileRecord">record</see> expressed as an <see cref="T:System.UInt32">unsigned integer</see>.
            </summary>
        </member>
        <member name="P:WillPower.FileFieldBase.Length">
            <summary>
            The field length expressed as an <see cref="T:System.UInt32">unsigned integer</see>.
            </summary>
        </member>
        <member name="P:WillPower.FileFieldBase.Name">
            <summary>
            The <see cref="T:System.String">name</see> of the field.
            </summary>
        </member>
        <member name="P:WillPower.FileFieldBase.DataFormat">
            <summary>
            The <see cref="T:WillPower.FileFieldDataFormat">format</see> of the field.
            String = 0, Comp3 (IBM Packed Number) = 1, Raw (binary) = 2.
            </summary>
        </member>
        <member name="P:WillPower.FileFieldBase.Value">
            <summary>
            The <see cref="M:WillPower.IFileField.Compute(System.Byte[])">computed</see> value boxed as an <see cref="T:System.Object">object</see>.
            </summary>
        </member>
        <member name="P:WillPower.FileFieldBase.Type">
            <summary>
            The <see cref="T:System.Type">type</see> of data the field contains.
            </summary>
        </member>
        <member name="P:WillPower.FileFieldBase.Precision">
            <summary>
            The precision of the value if decimal.
            </summary>
        </member>
        <member name="P:WillPower.FileFieldBase.YearFirst">
            <summary>
            If <see cref="T:System.Boolean">true</see> and the <see cref="P:WillPower.IFileField.DataFormat">DataFormat</see> is set to String (0), 
            will attempt to read the date value with year at the beginning.
            </summary>
        </member>
        <member name="P:WillPower.FileFieldBase.ByteValue">
            <summary>
            The original, source <see cref="T:System.Text.Encoding">Encoded</see> <see cref="T:System.Array">array</see> of bytes belonging to this field.
            </summary>
        </member>
        <member name="P:WillPower.FileFieldBase.StringValue">
            <summary>
            The <see cref="M:WillPower.IFileField.Compute(System.Byte[])">computed</see> result as a <see cref="T:System.String">string</see>.
            </summary>
        </member>
        <member name="M:WillPower.FileFieldBase.#ctor">
            <summary>
            .ctor. Must be inherited.
            </summary>
        </member>
        <member name="M:WillPower.FileFieldBase.#ctor(WillPower.IFileField)">
            <summary>
            .ctor. Must be inherited.
            </summary>
            <param name="clone">The source <see cref="T:WillPower.IFileField">field</see> to clone.</param>
        </member>
        <member name="M:WillPower.FileFieldBase.#ctor(WillPower.IFileParserEncoder,System.Type,System.String,System.UInt32,System.UInt32,WillPower.FileFieldDataFormat)">
            <summary>
            .ctor. Must be inherited.
            </summary>
            <param name="encoder">The <see cref="T:WillPower.IFileParserEncoder">IFileParserEncoder</see> instance to use for encoding.</param>
            <param name="type">The <see cref="T:System.Type">type</see> of data the field contains.</param>
            <param name="name">The <see cref="T:System.String">name</see> of the field.</param>
            <param name="startPosition">The starting position of this field in the <see cref="T:WillPower.IFileRecord">record</see> expressed as an <see cref="T:System.UInt32">unsigned integer</see>.</param>
            <param name="length">The field length expressed as an <see cref="T:System.UInt32">unsigned integer</see>.</param>
            <param name="format">The <see cref="T:WillPower.FileFieldDataFormat">format</see> of the field.</param>
        </member>
        <member name="M:WillPower.FileFieldBase.#ctor(WillPower.IFileParserEncoder,System.String,System.UInt32,System.UInt32,WillPower.FileFieldDataFormat,System.Byte,System.Boolean)">
            <summary>
            .ctor. Must be inherited. Used for numeric <see cref="T:System.Decimal">(decimal)</see> <see cref="T:System.Type">types</see>.
            </summary>
            <param name="encoder">The <see cref="T:WillPower.IFileParserEncoder">IFileParserEncoder</see> instance to use for encoding.</param>
            <param name="name">The <see cref="T:System.String">name</see> of the field.</param>
            <param name="startPosition">The starting position of this field in the <see cref="T:WillPower.IFileRecord">record</see> expressed as an <see cref="T:System.UInt32">unsigned integer</see>.</param>
            <param name="length">The field length expressed as an <see cref="T:System.UInt32">unsigned integer</see>.</param>
            <param name="format">The <see cref="T:WillPower.FileFieldDataFormat">format</see> of the field.</param>
            <param name="precision">The precision of the expected resultant as <see cref="T:System.Byte"/>Byte. Default is 0. The limitation is from logical reasons.</param>
            <param name="required">If <see cref="T:System.Boolean">true</see>, throw a <see cref="T:WillPower.FieldException"></see> on a null result.</param>
        </member>
        <member name="M:WillPower.FileFieldBase.#ctor(WillPower.IFileParserEncoder,System.String,System.UInt32,System.UInt32,WillPower.FileFieldDataFormat,System.Boolean,System.Boolean)">
            <summary>
            .ctor. Must be inherited. Used for <see cref="T:System.DateTime">Date</see> <see cref="T:System.Type">types</see>.
            </summary>
            <param name="encoder">The <see cref="T:WillPower.IFileParserEncoder">IFileParserEncoder</see> instance to use for encoding.</param>
            <param name="name">The <see cref="T:System.String">name</see> of the field.</param>
            <param name="startPosition">The starting position of this field in the <see cref="T:WillPower.IFileRecord">record</see> expressed as an <see cref="T:System.UInt32">unsigned integer</see>.</param>
            <param name="length">The field length expressed as an <see cref="T:System.UInt32">unsigned integer</see>.</param>
            <param name="format">The <see cref="T:WillPower.FileFieldDataFormat">format</see> of the field.</param>
            <param name="yearFirst">If <see cref="T:System.Boolean">true</see> it assumes the year is the first part of the string. Default is <see cref="T:System.Boolean">false</see>.
            Note: If the <see cref="T:System.String">string</see> contains a parsable date character ( / or - ) it will attempt to use 
            <see cref="M:System.DateTime.TryParse(System.String,System.DateTime@)">TryParse</see> and return any successful result. 
            If <see cref="M:System.DateTime.TryParse(System.String,System.DateTime@)">TryParse</see> fails it proceeds on to <see cref="T:System.String">string</see> parsing.
            </param>
            <param name="required">If <see cref="T:System.Boolean">true</see>, throw a <see cref="T:WillPower.FieldException"></see> on a null result.</param>
        </member>
        <member name="M:WillPower.FileFieldBase.Compute(System.Byte[])">
            <summary>
            Computes this provided <see cref="T:System.Array">array</see> of bytes using the properties provided.
            </summary>
            <param name="data">The <see cref="T:System.Array">array</see> of bytes to process.</param>
        </member>
        <member name="T:WillPower.FileParserBase">
            <summary>
            A common base class for a file parsing engine. Must be inherited.
            </summary>
        </member>
        <member name="P:WillPower.FileParserBase.TaskManager">
            <summary>
            The <see cref="T:WillPower.TaskManager">TaskManager</see> instance managing threads.
            </summary>
        </member>
        <member name="P:WillPower.FileParserBase.IsConditional">
            <summary>
            Gets a quick determination on whether a <see cref="T:System.Array">collection</see> of <see cref="T:WillPower.IFileConditional">conditions</see> exist.
            </summary>
        </member>
        <member name="P:WillPower.FileParserBase.Records">
            <summary>
            The <see cref="T:System.Collections.Generic.IEnumerable`1">collection</see> of <see cref="T:WillPower.IFileRecord">records</see> read from the file.
            Must be implemented.
            </summary>
        </member>
        <member name="P:WillPower.FileParserBase.Layout">
            <summary>
            The <see cref="T:WillPower.IFileLayout">layout</see> of the file, including any <see cref="P:WillPower.IFileLayout.HeaderRecord">header</see>, <see cref="P:WillPower.IFileLayout.FooterRecord">footer</see>, or <see cref="P:WillPower.IFileLayout.Conditions">conditional</see> rows.
            </summary>
        </member>
        <member name="M:WillPower.FileParserBase.#ctor">
            <summary>
            private .ctor.
            </summary>
        </member>
        <member name="M:WillPower.FileParserBase.#ctor(WillPower.IFileParserEncoder)">
            <summary>
            .ctor. Must be inherited.
            </summary>
            <param name="encoder">The <see cref="T:WillPower.IFileParserEncoder">IFileParserEncoder</see> instance to use for encoding.</param>
        </member>
        <member name="M:WillPower.FileParserBase.#ctor(WillPower.IFileLayout)">
            <summary>
            .ctor. Must be inherited.
            </summary>
            <param name="layout">The <see cref="T:WillPower.IFileLayout">layout</see> instance to use for processing.</param>
        </member>
        <member name="M:WillPower.FileParserBase.LoadFile(System.String)">
            <summary>
            Load the provided file as specified by <see cref="T:System.String">fileName</see> into the parser.
            </summary>
            <param name="fileName">The <see cref="T:System.String">name</see> of the file to load.</param>
        </member>
        <member name="M:WillPower.FileParserBase.LoadStream(System.IO.Stream)">
            <summary>
            Load the provided <see cref="T:System.IO.Stream">stream</see> into the parser.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream">stream</see> to load.</param>
        </member>
        <member name="M:WillPower.FileParserBase.UpdateEncoders">
            <summary>
            Updates any <see cref="T:WillPower.IFileParserEncoder">encoders</see> within the system
            </summary>
        </member>
        <member name="M:WillPower.FileParserBase.ToDataSet">
            <summary>
            Creates a <see cref="T:System.Data.DataSet">DataSet</see> containing <see cref="T:System.Data.DataTable">DataTables</see> 
            for each conditional record type, header, footer, and/or master recordset.
            </summary>
            <returns>A <see cref="T:System.Data.DataSet">DataSet</see> of <see cref="T:System.Data.DataTable">DataTables</see> with resulting data.</returns>
        </member>
        <member name="M:WillPower.FileParserBase.Dispose">
            <summary>
            Safely dispose of this instance.
            </summary>
        </member>
        <member name="T:WillPower.FileRecordBase">
            <summary>
            A common base class for record-level data, their <see cref="T:WillPower.IFileField">fields</see>, and any possible <see cref="T:WillPower.FieldException">Exceptions</see>.
            </summary>
        </member>
        <member name="P:WillPower.FileRecordBase.Encoder">
            <summary>
            The <see cref="T:WillPower.IFileParserEncoder">IFileParserEncoder</see> instance to utilize for processing.
            </summary>
        </member>
        <member name="P:WillPower.FileRecordBase.Fields">
            <summary>
            The <see cref="T:System.Array">collection</see> of <see cref="T:WillPower.IFileField">fields</see> belonging to this <see cref="T:WillPower.IFileRecord">record</see>.
            </summary>
        </member>
        <member name="P:WillPower.FileRecordBase.Exceptions">
            <summary>
            The <see cref="T:System.Array">collection</see> of <see cref="T:WillPower.FieldException">Exceptions</see>, if any.
            </summary>
        </member>
        <member name="M:WillPower.FileRecordBase.ReadRecord(System.Byte[])">
            <summary>
            Reads an <see cref="T:System.Array">array</see> of bytes into this instance.
            </summary>
            <param name="data">The <see cref="T:System.Array">array</see> of bytes to read.</param>
        </member>
        <member name="M:WillPower.FileRecordBase.#ctor(WillPower.IFileParserEncoder)">
            <summary>
            .ctor. Must be inherited.
            </summary>
            <param name="encoder">The <see cref="T:WillPower.IFileParserEncoder">IFileParserEncoder</see> instance to utilize for processing.</param>
        </member>
        <member name="M:WillPower.FileRecordBase.Get(System.String)">
            <summary>
            Returns the value of the <see cref="T:WillPower.IFileField">field</see> having the provided <see cref="T:System.String">name</see> as an <see cref="T:System.Object">object</see>.
            </summary>
            <param name="fieldName">The <see cref="T:System.String">name</see> of the <see cref="T:WillPower.IFileField">field</see>.</param>
            <returns>The value of the <see cref="T:WillPower.IFileField">field</see> expressed as an <see cref="T:System.Object">object</see>.</returns>
        </member>
        <member name="M:WillPower.FileRecordBase.Get``1(System.String)">
            <summary>
            Returns the value of the <see cref="T:WillPower.IFileField">field</see> having the provided <see cref="T:System.String">name</see> as <see cref="T:System.Type">T</see>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fieldName">The <see cref="T:System.String">name</see> of the <see cref="T:WillPower.IFileField">field</see>.</param>
            <returns>The value of the <see cref="T:WillPower.IFileField">field</see> expressed as <see cref="T:System.Type">T</see>.</returns>
        </member>
        <member name="T:WillPower.FileFieldDataFormat">
            <summary>
            <see cref="T:System.Enum">Enumeration</see> for <see cref="T:WillPower.IFileField">field</see> data format.
            </summary>
        </member>
        <member name="F:WillPower.FileFieldDataFormat.String">
            <summary>
            The value is an encoded <see cref="T:System.String">string</see>.
            </summary>
        </member>
        <member name="F:WillPower.FileFieldDataFormat.IBMPacked">
            <summary>
            The value is packed using the <see href="https://www.ibm.com/support/knowledgecenter/ssw_ibm_i_74/rzasd/padecfo.htm">IBM Packed Data Format</see>, 
            which is an implementation of <see href="http://www.3480-3590-data-conversion.com/article-packed-fields.html">Cobol COMP3</see>.
            </summary>
        </member>
        <member name="F:WillPower.FileFieldDataFormat.Raw">
            <summary>
            The value is raw binary.
            </summary>
        </member>
        <member name="F:WillPower.FileFieldDataFormat.Table">
            <summary>
            The value is a collection of values in a subset which may include multiple rows within the main recordset.
            </summary>
        </member>
        <member name="T:WillPower.Extensions">
            <summary>
            Container for extension methods.
            </summary>
        </member>
        <member name="M:WillPower.Extensions.Remove(System.String,System.String)">
            <summary>
            Removes the provided <see cref="T:System.String">string</see> from the <see cref="T:System.String">value</see>.
            </summary>
            <param name="value">The <see cref="T:System.String">string</see> to evaluate.</param>
            <param name="remove">The <see cref="T:System.String">string</see> to remove.</param>
            <returns>The <see cref="T:System.String">value</see> without the removed <see cref="T:System.String">string</see>.</returns>
        </member>
        <member name="M:WillPower.Extensions.Only(System.String,System.Char[])">
            <summary>
            Returns a <see cref="T:System.String">string</see> containing only the <see cref="T:System.Char">characters</see> specified.
            </summary>
            <param name="value">The <see cref="T:System.String">string</see> to evaluate.</param>
            <param name="chars">The <see cref="T:System.Collections.ICollection">collection</see> or allowable <see cref="T:System.Char">characters</see>.</param>
            <returns>A <see cref="T:System.String">string</see> containing only the <see cref="T:System.Char">characters</see> specified.</returns>
        </member>
        <member name="M:WillPower.Extensions.IsSimpleType(System.Object)">
            <summary>
            Determines if the <see cref="T:System.Object">object</see> is of a simple <see cref="T:System.Type">type</see>.
            </summary>
            <param name="value">The <see cref="T:System.Object">object</see> to evaluate.</param>
            <returns><see cref="T:System.Boolean">True</see> if the <see cref="T:System.Object">object</see> is not of a complex 
            <see cref="T:System.Type">type</see>.</returns>
        </member>
        <member name="M:WillPower.Extensions.NumbersOnly(System.String,System.Boolean)">
            <summary>
            Returns a <see cref="T:System.String">string</see> containing only the numbers and, optionally, one decimal 
            (.) (the first encountered) from the value.
            </summary>
            <param name="value">The <see cref="T:System.String">string</see> to parse.</param>
            <param name="allowDecimal">If <see cref="T:System.Boolean">true</see> will allow a single '.' (the first encountered). 
            Default is <see cref="T:System.Boolean">false</see>.</param>
            <returns>A <see cref="T:System.String">string</see> containing only the numbers and, optionally, one decimal (.) 
            (the first encountered) from the value.</returns>
        </member>
        <member name="M:WillPower.Extensions.IsNumeric(System.String,System.Boolean)">
            <summary>
            Returns <see cref="T:System.Boolean">true</see> if all characters in the string are digits and,
            if allowDecimal is <see cref="T:System.Boolean">true</see>, only one '.' exists.
            </summary>
            <param name="value">The <see cref="T:System.String">string</see> to evaluate.</param>
            <param name="allowDecimal">If <see cref="T:System.Boolean">true</see> will allow a single '.' (the first encountered). 
            Default is <see cref="T:System.Boolean">false</see>.</param>
            <returns>
            <see cref="T:System.Boolean">True</see> if all characters are numbers and, optionally, only one decimal (.) exists.
            </returns>
        </member>
        <member name="M:WillPower.Extensions.Convert(System.Byte[],System.Text.Encoding,System.Text.Encoding)">
            <summary>
            Converts the byte <see cref="T:System.Array">array</see> from the provided source <see cref="T:System.Text.Encoding">Encoding</see> 
            to the optional destination <see cref="T:System.Text.Encoding">Encoding</see> or <see cref="P:System.Text.Encoding.UTF8">UTF8</see> 
            as a byte <see cref="T:System.Array">array</see>.
            </summary>
            <param name="value">The <see cref="T:System.Array">array</see> of bytes to evaluate.</param>
            <param name="sourceEncoding">The <see cref="T:System.Text.Encoding">Encoding</see> scheme of the bytes provided.</param>
            <param name="destinationEncoding">The <see cref="T:System.Text.Encoding">Encoding</see> scheme of the bytes expected.</param>
            <returns>The resulting byte <see cref="T:System.Array">array</see>.</returns>
        </member>
        <member name="M:WillPower.Extensions.ToEncodedString(System.Byte[],System.Text.Encoding,System.Text.Encoding)">
            <summary>
            Converts the byte <see cref="T:System.Array">array</see> from the provided source <see cref="T:System.Text.Encoding">Encoding</see> 
            to the optional destination <see cref="T:System.Text.Encoding">Encoding</see> or <see cref="P:System.Text.Encoding.UTF8">UTF8</see> as string.
            </summary>
            <param name="value">The <see cref="T:System.Array">array</see> of bytes to evaluate.</param>
            <param name="sourceEncoding">The <see cref="T:System.Text.Encoding">Encoding</see> scheme of the bytes provided.</param>
            <param name="destinationEncoding">The <see cref="T:System.Text.Encoding">Encoding</see> scheme of the bytes expected.</param>
            <returns>
            The string <see cref="T:System.Text.Encoding">encoded</see> as <see cref="T:System.Text.Encoding">destinationEncdoing</see> 
            or <see cref="P:System.Text.Encoding.UTF8">UTF8</see>.
            </returns>
        </member>
        <member name="M:WillPower.Extensions.Raise(System.Decimal,System.Double)">
            <summary>
            A shortcut method to implement <see cref="M:System.Math.Pow(System.Double,System.Double)">System.Math.Pow</see> for decimal values.
            </summary>
            <param name="value">The <see cref="T:System.Decimal">decimal</see> value.</param>
            <param name="exponent">The exponent expressed as <see cref="T:System.Double">double</see>.</param>
            <returns>The resultant as <see cref="T:System.Decimal">decimal</see>.</returns>
        </member>
        <member name="M:WillPower.Extensions.AsInt(System.Decimal)">
            <summary>
            quickly converts a <see cref="T:System.Decimal">decimal</see> to the <see cref="M:WillPower.Extensions.Round(System.Decimal,System.Double)">rounded</see> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal">decimal</see> value.</param>
            <returns>The value as <see cref="T:System.Int32">int</see>.</returns>
        </member>
        <member name="M:WillPower.Extensions.ToTheCent(System.Decimal)">
            <summary>
            Rounds to the <see cref="T:System.Decimal">decimal</see> value at the hundredths (10 to the 2nd, or a precision of 2). 
            See <seealso cref="M:WillPower.Extensions.Round(System.Decimal,System.Double)">Round()</seealso>
            </summary>
            <param name="value">The <see cref="T:System.Decimal">decimal</see> value.</param>
            <returns>The <see cref="T:System.Decimal">decimal</see> rounded value.</returns>
            <seealso cref="M:WillPower.Extensions.Round(System.Decimal,System.Double)"/>
        </member>
        <member name="M:WillPower.Extensions.ToTheHighCent(System.Decimal)">
            <summary>
            Rounds to the highest <see cref="T:System.Decimal">decimal</see> value at the hundredths (10 to the 2nd, or a precision of 2). 
            See <seealso cref="M:WillPower.Extensions.RoundUp(System.Decimal,System.Double)">RoundUp()</seealso>
            </summary>
            <param name="value">The <see cref="T:System.Decimal">decimal</see> value.</param>
            <returns>The <see cref="T:System.Decimal">decimal</see> rounded up.</returns>
            <seealso cref="M:WillPower.Extensions.RoundUp(System.Decimal,System.Double)"/>
        </member>
        <member name="M:WillPower.Extensions.ToTheLowCent(System.Decimal)">
            <summary>
            Rounds to the lowest <see cref="T:System.Decimal">decimal</see> value at the hundredths (10 to the 2nd, or a precision of 2). 
            See <seealso cref="M:WillPower.Extensions.RoundDown(System.Decimal,System.Double)">RoundDown()</seealso>
            </summary>
            <param name="value">The <see cref="T:System.Decimal">decimal</see> value.</param>
            <returns>The <see cref="T:System.Decimal">decimal</see> rounded down.</returns>
        </member>
        <member name="M:WillPower.Extensions.Round(System.Decimal,System.Double)">
            <summary>
            Rounds to the <see cref="T:System.Decimal">decimal</see> value at the provided precision value (or 0). 
            If desired for currency, use <see cref="M:WillPower.Extensions.ToTheCent(System.Decimal)">ToTheCent()</see> instead.
            </summary>
            <param name="value">The <see cref="T:System.Decimal">decimal</see> value.</param>
            <param name="precision">The <see cref="T:System.Double">precision</see> to apply to the decimal value.</param>
            <returns>The <see cref="T:System.Decimal">decimal</see> rounded value.</returns>
        </member>
        <member name="M:WillPower.Extensions.RoundUp(System.Decimal,System.Double)">
            <summary>
            Rounds to the highest <see cref="T:System.Decimal">decimal</see> value at the provided precision value (or 0). 
            If desired for currency, use <see cref="M:WillPower.Extensions.ToTheHighCent(System.Decimal)">ToTheHighCent()</see> instead.
            </summary>
            <param name="value">The <see cref="T:System.Decimal">decimal</see> value.</param>
            <param name="precision">The <see cref="T:System.Double">precision</see> to apply to the decimal value.</param>
            <returns>The <see cref="T:System.Decimal">decimal</see> rounded up.</returns>
        </member>
        <member name="M:WillPower.Extensions.RoundDown(System.Decimal,System.Double)">
            <summary>
            Rounds to the lowest <see cref="T:System.Decimal">decimal</see> value at the provided precision value (or 0). 
            If desired for currency, use <see cref="M:WillPower.Extensions.ToTheLowCent(System.Decimal)">ToTheLowCent()</see> instead.
            </summary>
            <param name="value">The <see cref="T:System.Decimal">decimal</see> value.</param>
            <param name="precision">The <see cref="T:System.Double">precision</see> to apply to the decimal value.</param>
            <returns>The <see cref="T:System.Decimal">decimal</see> rounded down.</returns>
        </member>
        <member name="M:WillPower.Extensions.Century(System.DateTime)">
            <summary>
            Returns the Century of the <see cref="T:System.DateTime">System.DateTime</see> as an <see cref="T:System.Int32">int</see>.
            </summary>
            <param name="value">The <see cref="T:System.DateTime">System.DateTime</see> value</param>
            <returns>The Century as an <see cref="T:System.Int32">int</see>.</returns>
        </member>
        <member name="M:WillPower.Extensions.PascalCased(System.String)">
            <summary>
            Returns a sentence (or a single word) as pascal-cased ("Mr. George Willington Gracey Esq." is an example of pascal casing).
            </summary>
            <param name="value">The <see cref="T:System.String">string</see> value to evaluate.</param>
            <returns>The <see cref="T:System.String">string</see> value pascal-cased.</returns>
        </member>
        <member name="M:WillPower.Extensions.Capitalize(System.String)">
            <summary>
            Shifts any first character of the string to UpperInvariant and any remaining characters ToLowerInvariant.
            </summary>
            <param name="value">The <see cref="T:System.String">string</see> value to evaluate.</param>
            <returns>The reformatted <see cref="T:System.String">string</see>.</returns>
        </member>
        <member name="M:WillPower.Extensions.ToByteArray(System.Object,System.Text.Encoding)">
            <summary>
            Converts an <see cref="T:System.Object">object</see> to an <see cref="T:System.Array">array</see> of bytes.
            </summary>
            <param name="value">The <see cref="T:System.Object">object</see> to evaluate.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding">Encoding</see> scheme of the bytes expected or 
            <see cref="P:System.Text.Encoding.UTF8">UTF8</see>.</param>
            <returns>The resulting <see cref="T:System.Array">array</see> of bytes.</returns>
        </member>
        <member name="M:WillPower.Extensions.ToObject(System.Byte[])">
            <summary>
            Converts an <see cref="T:System.Array">array</see> of bytes to an <see cref="T:System.Object">object</see>.
            </summary>
            <param name="value">The <see cref="T:System.Array">array</see> of bytes to evaluate.</param>
            <returns>The resulting <see cref="T:System.Object">object</see>.</returns>
        </member>
        <member name="M:WillPower.Extensions.ToObject``1(System.Byte[])">
            <summary>
            Converts an <see cref="T:System.Array">array</see> of bytes to the specified <see cref="T:System.Type">type</see>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type">type</see> of return object.</typeparam>
            <param name="value">The <see cref="T:System.Array">array</see> of bytes to evaluate.</param>
            <returns>The object as <see cref="T:System.Type">T</see>.</returns>
        </member>
        <member name="M:WillPower.Extensions.ToBool(System.String)">
            <summary>
            Converts the string to a <see cref="T:System.Boolean">bool</see> or null.
            </summary>
            <param name="value">The <see cref="T:System.String">string</see> value to evaluate.</param>
            <returns><see cref="T:System.Boolean">Boolean</see> or null.</returns>
        </member>
        <member name="M:WillPower.Extensions.ToDateTime(System.String,System.Boolean)">
            <summary>
            Converts the string to a <see cref="T:System.DateTime">System.DateTime</see> or null.
            </summary>
            <param name="value">The <see cref="T:System.String">string</see> value to evaluate.</param>
            <param name="yearFirst">If <see cref="T:System.Boolean">true</see> it assumes the year is the first part of the string. 
            Default is <see cref="T:System.Boolean">false</see>.
            Note: If the <see cref="T:System.String">string</see> contains a parsable date character ( / or - ) it will attempt to use 
            <see cref="M:System.DateTime.TryParse(System.String,System.DateTime@)">TryParse</see> and return any successful result. 
            If <see cref="M:System.DateTime.TryParse(System.String,System.DateTime@)">TryParse</see> fails it proceeds on to 
            <see cref="T:System.String">string</see> parsing.
            </param>
            <returns><see cref="T:System.DateTime">System.DateTime</see> or null.</returns>
        </member>
        <member name="M:WillPower.Extensions.ToInt(System.UInt32)">
            <summary>
            Converts an <see cref="T:System.UInt32">unsigned integer</see> to a <see cref="T:System.Int32">signed integer</see>.
            If the <see cref="T:System.UInt32">unsigned integer</see> is greater than <see cref="F:System.Int32.MaxValue">int.MaxValue</see> it will return
            a negative <see cref="T:System.Int32">integer</see> starting at -1 for each value greater than <see cref="F:System.Int32.MaxValue">int.MaxValue</see>.
            I.e., int.MaxValue + 1 returns -1, int.MaxValue + 2 returns -2, int.MaxValue + 3 returns -3, and so forth.
            <code>
            public static int ToInt(this uint value)
            {
                if (value > int.MaxValue)
                {
                    return <seealso cref="M:System.Convert.ToInt32(System.Int32)">System.Convert.ToInt32</seealso>((value - int.MaxValue) * -1);
                }
                return <seealso cref="M:System.Convert.ToInt32(System.Int32)">System.Convert.ToInt32</seealso>(value);
            }
            </code>
            </summary>
            <param name="value">The <see cref="T:System.UInt32">unsigned integer</see> to evaluate.</param>
            <returns>The resulting <see cref="T:System.Int32">signed integer</see>.</returns>
        </member>
        <member name="M:WillPower.Extensions.ToUInt(System.Int32)">
            <summary>
            Converts a <see cref="T:System.Int32">signed integer</see> to an <see cref="T:System.UInt32">unsigned integer</see>.
            If the <see cref="T:System.Int32">signed integer</see> is negative then it will return
            a value greater than <see cref="F:System.Int32.MaxValue">int.MaxValue</see> starting at +1 for each value below 0.
            I.e., -1 returns int.MaxValue + 1, -2 returns int.MaxValue + 2, -3 returns int.MaxValue + 3, and so forth.
            <code>
            public static uint ToUInt(this int value)
            {
                return value <![CDATA[<]]> 0 
                    ? <seealso cref="M:System.Convert.ToUInt32(System.Int32)">System.Convert.ToUInt32</seealso>(int.MaxValue + System.Math.Abs(value)) 
                    : <seealso cref="M:System.Convert.ToUInt32(System.Int32)">System.Convert.ToUInt32</seealso>(value);
            }
            </code>
            </summary>
            <param name="value">The <see cref="T:System.Int32">signed integer</see> to evaluate.</param>
            <returns>The resulting <see cref="T:System.UInt32">unsigned integer</see>.</returns>
        </member>
        <member name="M:WillPower.Extensions.MaximumConcurrency(System.Threading.Tasks.TaskFactory)">
            <summary>
            Returns the default <see cref="T:System.Threading.Tasks.TaskScheduler">TaskScheduler</see> of the <see cref="T:System.Threading.Tasks.TaskFactory"> 
            TaskFactory's</see> <see cref="P:System.Threading.Tasks.TaskScheduler.MaximumConcurrencyLevel">MaximumConcurrencyLevel</see> 
            as an <see cref="T:System.UInt32">unsigned integer</see>.
            <code>
            public static uint MaximumConcurrency(this System.Threading.Tasks.TaskFactory value)
            {
                return (value?.<see cref="P:System.Threading.Tasks.TaskFactory.Scheduler">Scheduler</see>?
                    .MaximumConcurrencyLevel ?? 0).<see cref="M:WillPower.Extensions.ToUInt(System.Int32)">ToUInt()</see>;
            }
            </code>
            </summary>
            <param name="value">The <see cref="T:System.Threading.Tasks.TaskFactory">TaskFactory</see> to evaluate.</param>
            <returns>
            The resulting <see cref="T:System.Int32">signed integer</see> as an <see cref="T:System.UInt32">unsigned integer</see>.
            </returns>
        </member>
        <member name="M:WillPower.Extensions.CastAs``1(System.Object)">
            <summary>
            Evaulates an <see cref="T:System.Object">object</see> for null and returns default if null (for <see cref="T:System.Nullable">nullable</see> 
            <see cref="T:System.Type">types</see> this could be null or a default value). For all other <see cref="T:System.Type">types</see> it returns 
            the default of the <see cref="T:System.Type">type (T)</see> provided.
            If not null, will attempt a <see href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/types/casting-and-type-conversions">
            direct cast</see> to <see cref="T:System.Type">type (T)</see>.
            <code>
            public static T CastAs<![CDATA[<T>]]>(this object value)
            {
                if (value == null)
                {
                    return default;
                }
                return (T)value;
            }
            </code>
            </summary>
            <typeparam name="T">The <see cref="T:System.Type">type</see> of return object.</typeparam>
            <param name="value">The <see cref="T:System.Object">object</see> to cast.</param>
            <returns>The value as <see cref="T:System.Type">T</see> or default.</returns>
        </member>
        <member name="M:WillPower.Extensions.GotoStart(System.IO.Stream)">
            <summary>
            If possible, positions the pointer to the beginning of the stream without throwing an error.
            </summary>
            <param name="value">The <see cref="T:System.IO.Stream">System.IO.Stream</see>.</param>
        </member>
        <member name="M:WillPower.Extensions.DivideInto(System.String,System.UInt32)">
            <summary>
            Divides the long <see cref="T:System.String">string</see> into an <see cref="T:System.Array">array</see> of 
            <see cref="T:System.String">strings</see> of a length of groupOf.
            </summary>
            <param name="value">The <see cref="T:System.String">string</see> to evaluate.</param>
            <param name="groupsOf">The <see cref="T:System.UInt32">number</see> of <see cref="T:System.Char">characters</see> 
            for each <see cref="T:System.String">string</see> in the <see cref="T:System.Array">array</see>.</param>
            <returns>An <see cref="T:System.Array">array</see> of <see cref="T:System.String">strings</see> of a length of groupOf.</returns>
        </member>
        <member name="M:WillPower.Extensions.AsString(System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Restores an <see cref="T:System.Array">array</see> of <see cref="T:System.Char">characters</see> to a <see cref="T:System.String">string</see>.
            </summary>
            <param name="value">The <see cref="T:System.Array">array</see> of <see cref="T:System.Char">characters</see> to evaluate.</param>
            <returns>The resulting <see cref="T:System.String">string</see>.</returns>
        </member>
        <member name="M:WillPower.Extensions.FromPackedBool(System.Byte)">
            <summary>
            Returns <see cref="T:System.Boolean">true</see> if the <see cref="T:System.Byte">byte</see> has value > 0 in the second nibble.
            <seealso href="https://www.ibm.com/support/knowledgecenter/ssw_ibm_i_74/rzasd/padecfo.htm">IBM Packed Decimal Format.</seealso>
            </summary>
            <param name="value">The <see cref="T:System.Byte">byte</see> to evaluate.</param>
            <returns>The <see cref="T:System.Boolean">Boolean</see> result or false.</returns>
        </member>
        <member name="M:WillPower.Extensions.FromPackedShort(System.Byte[])">
            <summary>
            Returns the <see cref="T:System.Int16">short</see> value of the packed number or 0.
            <seealso href="https://www.ibm.com/support/knowledgecenter/ssw_ibm_i_74/rzasd/padecfo.htm">IBM Packed Decimal Format.</seealso>
            </summary>
            <param name="value">The <see cref="T:System.Array">array</see> of bytes to evaluate.</param>
            <returns>The <see cref="T:System.Int16">System.Int16</see> resultant.</returns>
        </member>
        <member name="M:WillPower.Extensions.FromPackedInt(System.Byte[])">
            <summary>
            Returns the <see cref="T:System.Int32">int</see> value of the packed number or 0.
            <seealso href="https://www.ibm.com/support/knowledgecenter/ssw_ibm_i_74/rzasd/padecfo.htm">IBM Packed Decimal Format.</seealso>
            </summary>
            <param name="value">The <see cref="T:System.Array">array</see> of bytes to evaluate.</param>
            <returns>The <see cref="T:System.Int32">System.Int32</see> resultant.</returns>
        </member>
        <member name="M:WillPower.Extensions.FromPackedLong(System.Byte[])">
            <summary>
            Returns the <see cref="T:System.Int64">long</see> value of the packed number or 0.
            <seealso href="https://www.ibm.com/support/knowledgecenter/ssw_ibm_i_74/rzasd/padecfo.htm">IBM Packed Decimal Format.</seealso>
            </summary>
            <param name="value">The <see cref="T:System.Array">array</see> of bytes to evaluate.</param>
            <returns>The <see cref="T:System.Int64">System.Int64</see> resultant.</returns>
        </member>
        <member name="M:WillPower.Extensions.FromPackedUShort(System.Byte[])">
            <summary>
            Returns the <see cref="T:System.UInt16">unsigned short</see> value of the packed number or 0.
            <seealso href="https://www.ibm.com/support/knowledgecenter/ssw_ibm_i_74/rzasd/padecfo.htm">IBM Packed Decimal Format.</seealso>
            </summary>
            <param name="value">The <see cref="T:System.Array">array</see> of bytes to evaluate.</param>
            <returns>The <see cref="T:System.UInt16">System.UInt16</see> resultant.</returns>
        </member>
        <member name="M:WillPower.Extensions.FromPackedUInt(System.Byte[])">
            <summary>
            Returns the <see cref="T:System.UInt32">unsigned int</see> value of the packed number or 0.
            <seealso href="https://www.ibm.com/support/knowledgecenter/ssw_ibm_i_74/rzasd/padecfo.htm">IBM Packed Decimal Format.</seealso>
            </summary>
            <param name="value">The <see cref="T:System.Array">array</see> of bytes to evaluate.</param>
            <returns>The <see cref="T:System.UInt32">System.UInt32</see> resultant.</returns>
        </member>
        <member name="M:WillPower.Extensions.FromPackedULong(System.Byte[])">
            <summary>
            Returns the <see cref="T:System.UInt64">unsigned long</see> value of the packed number or 0.
            <seealso href="https://www.ibm.com/support/knowledgecenter/ssw_ibm_i_74/rzasd/padecfo.htm">IBM Packed Decimal Format.</seealso>
            </summary>
            <param name="value">The <see cref="T:System.Array">array</see> of bytes to evaluate.</param>
            <returns>The <see cref="T:System.UInt64">System.UInt64</see> resultant.</returns>
        </member>
        <member name="M:WillPower.Extensions.FromPackedDouble(System.Byte[])">
            <summary>
            Returns the <see cref="T:System.Double">double</see> value of the packed number or 0.
            <seealso href="https://www.ibm.com/support/knowledgecenter/ssw_ibm_i_74/rzasd/padecfo.htm">IBM Packed Decimal Format.</seealso>
            </summary>
            <param name="value">The <see cref="T:System.Array">array</see> of bytes to evaluate.</param>
            <returns>The <see cref="T:System.Double">System.Double</see> resultant.</returns>
        </member>
        <member name="M:WillPower.Extensions.FromPackedDate(System.Byte[])">
            <summary>
            Returns the <see cref="T:System.DateTime">DateTime</see> value of the packed number or null.
            Note: The byte <see cref="T:System.Array">array</see> must be 2 or 4 bytes long.
            </summary>
            <param name="value">The <see cref="T:System.Array">array</see> of bytes to evaluate. 
            Length must be 2 (Short Date Format) or 4 (Long Date Format).
            </param>
            <returns>The <see cref="T:System.DateTime">System.DateTime</see> resultant or null.</returns>
        </member>
        <member name="M:WillPower.Extensions.FromComp3(System.Byte[])">
            <summary>
            Used internally to convert nibbles to digits and return a number without evaluating 0th nibble for flags,
            a.k.a., every nibble is included in the result. Critical to PackedDate conversion.
            Used in <see cref="M:WillPower.Extensions.FromPackedDate(System.Byte[])">byte[].FromPackedDate()</see>.
            </summary>
            <param name="value">The <see cref="T:System.Array">array</see> of bytes to evaluate.</param>
            <returns>The resulting <see cref="T:System.UInt64">unsigned long</see>.</returns>
        </member>
        <member name="M:WillPower.Extensions.FromPackedDecimal(System.Byte[],System.Byte)">
            <summary>
            Returns the <see cref="T:System.Decimal">decimal</see> value of the packed number.
            <seealso href="https://www.ibm.com/support/knowledgecenter/ssw_ibm_i_74/rzasd/padecfo.htm">IBM Packed Decimal Format.</seealso>
            </summary>
            <param name="value">The <see cref="T:System.Array">array</see> of bytes to evaluate.
            <exception cref="T:System.InvalidCastException">System.InvalidCastException</exception> results from null or empty byte <see cref="T:System.Array">array</see>.
            </param>
            <param name="precision">The precision of the expected resultant as <see cref="T:System.Byte"/>Byte. Default is 0. The limitation is from logical reasons. 
            Obviously negative values are not supported and should be handled through the decimal.Raise(double) extension method or your own code (10 raised to precision * value).
            </param>
            <returns>The resultant as <see cref="T:System.Decimal">decimal</see>.</returns>
        </member>
        <member name="M:WillPower.Extensions.FromRawDate(System.Byte[])">
            <summary>
            Returns the <see cref="T:System.DateTime">DateTime</see> value of the byte <see cref="T:System.Array">array</see> or null.
            It is assumed the bytes store a <see cref="T:System.DateTime">DateTime</see> value encoded directly.
            </summary>
            <param name="value">The <see cref="T:System.Array">array</see> of bytes to evaluate. 
            </param>
            <returns>The <see cref="T:System.DateTime">System.DateTime</see> resultant or null.</returns>
        </member>
        <member name="M:WillPower.Extensions.FromRawDecimal(System.Byte[],System.Byte)">
            <summary>
            Returns the <see cref="T:System.Decimal">decimal</see> value of the byte <see cref="T:System.Array">array</see>.
            </summary>
            <param name="value">The <see cref="T:System.Array">array</see> of bytes to evaluate.
            <exception cref="T:System.InvalidCastException">System.InvalidCastException</exception> results from null or 
            empty byte <see cref="T:System.Array">array</see>.
            </param>
            <param name="precision">The precision of the expected resultant as <see cref="T:System.Byte"/>Byte. Default is 0. 
            The limitation is from logical reasons. 
            Obviously negative values are not supported and should be handled through the decimal.Raise(double) 
            extension method or your own code (10 raised to precision * value).
            </param>
            <returns>The resultant as <see cref="T:System.Decimal">decimal</see>.</returns>
        </member>
        <member name="M:WillPower.Extensions.FromRawShort(System.Byte[])">
            <summary>
            Returns the <see cref="T:System.Int16">short</see> value of the byte <see cref="T:System.Array">array</see> or 0.
            </summary>
            <param name="value">The <see cref="T:System.Array">array</see> of bytes to evaluate.</param>
            <returns>The <see cref="T:System.Int16">System.Int16</see> resultant.</returns>
        </member>
        <member name="M:WillPower.Extensions.FromRawInt(System.Byte[])">
            <summary>
            Returns the <see cref="T:System.Int32">int</see> value of the byte <see cref="T:System.Array">array</see> or 0.
            </summary>
            <param name="value">The <see cref="T:System.Array">array</see> of bytes to evaluate.</param>
            <returns>The <see cref="T:System.Int32">System.Int32</see> resultant.</returns>
        </member>
        <member name="M:WillPower.Extensions.FromRawLong(System.Byte[])">
            <summary>
            Returns the <see cref="T:System.Int64">long</see> value of the byte <see cref="T:System.Array">array</see> or 0.
            </summary>
            <param name="value">The <see cref="T:System.Array">array</see> of bytes to evaluate.</param>
            <returns>The <see cref="T:System.Int64">System.Int64</see> resultant.</returns>
        </member>
        <member name="M:WillPower.Extensions.FromRawDouble(System.Byte[])">
            <summary>
            Returns the <see cref="T:System.Double">double</see> value of the byte <see cref="T:System.Array">array</see> or 0.
            </summary>
            <param name="value">The <see cref="T:System.Array">array</see> of bytes to evaluate.</param>
            <returns>The <see cref="T:System.Double">System.Double</see> resultant.</returns>
        </member>
        <member name="M:WillPower.Extensions.FromRawUShort(System.Byte[])">
            <summary>
            Returns the <see cref="T:System.UInt16">unsigned short</see> value of the byte <see cref="T:System.Array">array</see> or 0.
            </summary>
            <param name="value">The <see cref="T:System.Array">array</see> of bytes to evaluate.</param>
            <returns>The <see cref="T:System.UInt16">System.UInt16</see> resultant.</returns>
        </member>
        <member name="M:WillPower.Extensions.FromRawUInt(System.Byte[])">
            <summary>
            Returns the <see cref="T:System.UInt32">unsigned int</see> value of the byte <see cref="T:System.Array">array</see> or 0.
            </summary>
            <param name="value">The <see cref="T:System.Array">array</see> of bytes to evaluate.</param>
            <returns>The <see cref="T:System.UInt32">System.UInt32</see> resultant.</returns>
        </member>
        <member name="M:WillPower.Extensions.FromRawULong(System.Byte[])">
            <summary>
            Returns the <see cref="T:System.UInt64">unsigned long</see> value of the byte <see cref="T:System.Array">array</see> or 0.
            </summary>
            <param name="value">The <see cref="T:System.Array">array</see> of bytes to evaluate.</param>
            <returns>The <see cref="T:System.UInt64">System.UInt64</see> resultant.</returns>
        </member>
        <member name="M:WillPower.Extensions.ReadNext(System.IO.Stream,System.UInt32)">
            <summary>
            Reads the <see cref="T:System.IO.Stream">stream</see> for the specified number of bytes or null.
            </summary>
            <param name="value">The <see cref="T:System.IO.Stream">stream</see> to read from.</param>
            <param name="RecordLength">The number of bytes to read expressed as an <see cref="T:System.UInt32">unsigned integer</see>.</param>
            <returns>An <see cref="T:System.Array">array</see> of bytes from the stream or null.</returns>
        </member>
        <member name="M:WillPower.Extensions.ReadToChar(System.IO.Stream,System.Char,System.Text.Encoding)">
            <summary>
            Reads the <see cref="T:System.IO.Stream">stream</see> up to the specified <see cref="T:System.Char">character</see>.
            </summary>
            <param name="value">The <see cref="T:System.IO.Stream">stream</see> to read from.</param>
            <param name="Terminator">The end of line <see cref="T:System.Char">char</see>.</param>
            <param name="sourceEncoding">The optional destination <see cref="T:System.Text.Encoding">Encoding</see> or 
            <see cref="P:System.Text.Encoding.ASCII">ASCII</see>.</param>
            <returns>An <see cref="T:System.Array">array</see> of bytes from the stream or null.</returns>
        </member>
        <member name="T:WillPower.FieldException">
            <summary>
            <see cref="T:System.Exception">System.Exception</see> inheritor.
            An object for containing exception data occurring during field read. Can be inherited.
            </summary>
        </member>
        <member name="P:WillPower.FieldException.Field">
            <summary>
            The specific field <see cref="T:WillPower.IFileField">(IFileField)</see> that generated the <see cref="T:System.Exception">Exception</see> or null.
            </summary>
        </member>
        <member name="M:WillPower.FieldException.#ctor(System.String)">
            <summary>
            .ctor. Use as you would <see cref="T:System.Exception">System.Exception</see>.
            </summary>
            <param name="message">The <see cref="T:System.String">message</see> for the exception.</param>
        </member>
        <member name="M:WillPower.FieldException.#ctor(System.String,WillPower.IFileField)">
            <summary>
            .ctor. Use as you would <see cref="T:System.Exception">System.Exception</see>.
            </summary>
            <param name="message">The <see cref="T:System.String">message</see> for the exception.</param>
            <param name="field">The specific field <see cref="T:WillPower.IFileField">(IFileField)</see> that generated the <see cref="T:System.Exception">Exception</see>.</param>
        </member>
        <member name="M:WillPower.FieldException.#ctor(System.Exception,WillPower.IFileField)">
            <summary>
            .ctor. Use as you would <see cref="T:System.Exception">System.Exception</see>.
            </summary>
            <param name="ex">The original <see cref="T:System.Exception">Exception</see> generated during field processing, passed to <see cref="P:System.Exception.InnerException">InnerException</see>.</param>
            <param name="field">The specific field <see cref="T:WillPower.IFileField">(IFileField)</see> that generated the <see cref="T:System.Exception">Exception</see>.</param>
        </member>
        <member name="T:WillPower.AbortableTask">
            <summary>
            A simple container for handling <see cref="T:System.Threading.Tasks.Task">Task</see> cancellation.
            Inherits <see cref="T:System.Threading.Tasks.Task">System.Threading.Tasks.Task</see>.
            </summary>
        </member>
        <member name="P:WillPower.AbortableTask.Task">
            <summary>
            The root <see cref="T:System.Threading.Tasks.Task">Task</see>.
            </summary>
        </member>
        <member name="P:WillPower.AbortableTask.CancellationTokenSource">
            <summary>
            The <see cref="T:System.Threading.CancellationTokenSource">source</see> of the <see cref="T:System.Threading.CancellationToken">CancellationToken</see>.
            </summary>
        </member>
        <member name="P:WillPower.AbortableTask.CancellationToken">
            <summary>
            The <see cref="T:System.Threading.CancellationToken">CancellationToken</see>.
            </summary>
        </member>
        <member name="M:WillPower.AbortableTask.#ctor(System.Action,System.Threading.CancellationTokenSource)">
            <summary>
            .ctor. Creates a new Instance of AbortableTask.
            </summary>
            <param name="action">The <see cref="T:System.Action">action</see> to be executed.</param>
            <param name="tokenSource">The <see cref="T:System.Threading.CancellationTokenSource">source</see> 
            of the <see cref="T:System.Threading.CancellationToken">CancellationToken</see>.</param>
        </member>
        <member name="M:WillPower.AbortableTask.#ctor(System.Action)">
            <summary>
            .ctor. Creates a new Instance of AbortableTask.
            </summary>
            <param name="action">The <see cref="T:System.Action">action</see> to be executed.</param>
        </member>
        <member name="M:WillPower.AbortableTask.Abort">
            <summary>
            Invokes Cancel on the <see cref="T:System.Threading.CancellationTokenSource">CancellationTokenSource</see>.
            </summary>
        </member>
        <member name="M:WillPower.AbortableTask.Dispose">
            <summary>
            Disposes of this instance.
            </summary>
        </member>
        <member name="T:WillPower.Encodings">
            <summary>
            A container for uncommonly used <see cref="T:System.Text.Encoding">Encodings</see>.
            </summary>
        </member>
        <member name="P:WillPower.Encodings.EBCDIC">
            <summary>
            The EBCDIC <see cref="T:System.Text.Encoding">Encoding</see> for easy reference. 
            This is usually the <see href="https://www.ibm.com/support/knowledgecenter/SSEQ5Y_5.9.0/com.ibm.pcomm.doc/reference/pdf/hcp_referenceV58.pdf">
            IBM 037</see> code page in .Net.
            Default is CodePage IBM037.
            </summary>
        </member>
        <member name="P:WillPower.Encodings.ANSI">
            <summary>
            ANSI (Default) <see cref="T:System.Text.Encoding">Encoding</see> for easy reference. 
            </summary>
        </member>
        <member name="T:WillPower.FileConditional">
            <summary>
            A concrete class to encapsulate expected functionality to determine an action.
            </summary>
        </member>
        <member name="P:WillPower.FileConditional.Name">
            <summary>
            The <see cref="T:System.String">name</see> of this condition, for reference.
            </summary>
        </member>
        <member name="P:WillPower.FileConditional.Fields">
            <summary>
            The collection of fields <see cref="T:WillPower.IFileField">fields</see> containing clones of the fields to evaluate.
            </summary>
        </member>
        <member name="P:WillPower.FileConditional.Condition">
            <summary>
            <see cref="T:System.Func`2">Func<![CDATA[<]]></see><see cref="T:WillPower.IFileRecord">IFileRecord</see>
            <see cref="T:System.Func`2">, bool<![CDATA[>]]></see>: A method to evaluate a <see cref="T:WillPower.IFileRecord">record</see> 
            and return true or false to determine some action.
            <example>
            <![CDATA[
            inline:
            
                MyFileConditional.Condition = record => record.Get<string>("Field3") == "C";
            
            delegate:
            
                MyFileConditional.Condition = CheckForField3C;
            ...
                private bool CheckForField3C(IFileRecord record)
                {
                    return record.Get<string>("Field3") == "C";
                }
                
            ]]>
            </example>
            </summary>
        </member>
        <member name="M:WillPower.FileConditional.#ctor">
            <summary>
            .ctor. Leaves <see cref="P:WillPower.IFileConditional.Condition">Condition</see> property null.
            </summary>
        </member>
        <member name="M:WillPower.FileConditional.#ctor(System.Func{WillPower.IFileRecord,System.Boolean})">
            <summary>
            .ctor. Sets the Condition Property to condition.
            </summary>
            <param name="condition">
            <see cref="T:System.Func`2">Func<![CDATA[<]]></see><see cref="T:WillPower.IFileRecord">IFileRecord</see>
            <see cref="T:System.Func`2">, bool<![CDATA[>]]></see>: A method to evaluate a <see cref="T:WillPower.IFileRecord">record</see> 
            and return <see cref="T:System.Boolean">true</see> or <see cref="T:System.Boolean">false</see> to determine some action.
            <example>
            <![CDATA[
            delegate:
            
                MyFileConditional.Condition = CheckForField3C;
            ...
                private bool CheckForField3C(IFileRecord record)
                {
                    return record.Get<string>("Field3") == "C";
                }
                
            inline:
            
                MyFileConditional.Condition = record => record.Get<string>("Field3") == "C";
            
            ]]>
            </example>
            </param>
        </member>
        <member name="M:WillPower.FileConditional.IsConditional(WillPower.IFileRecord)">
            <summary>
            Evaluates the provided <see cref="T:WillPower.IFileRecord">record</see> against the <see cref="P:WillPower.IFileConditional.Condition">Condition</see> property.
            </summary>
            <param name="record">The <see cref="T:WillPower.IFileRecord">record</see> to evaluate against the <see cref="P:WillPower.IFileConditional.Condition">Condition</see> property.</param>
            <returns>True if the <see cref="T:WillPower.IFileRecord">record</see> meets the <see cref="P:WillPower.IFileConditional.Condition">Condition</see> property.</returns>
        </member>
        <member name="T:WillPower.FileField">
            <summary>
            A concreate class containing the necessary properties and methods for processing a single field.
            Cannot be inherited.
            </summary>
        </member>
        <member name="P:WillPower.FileField.ByteValue">
            <summary>
            The original, source <see cref="T:System.Text.Encoding">Encoded</see> <see cref="T:System.Array">array</see> of bytes belonging to this field.
            </summary>
        </member>
        <member name="P:WillPower.FileField.StringValue">
            <summary>
            The <see cref="M:WillPower.IFileField.Compute(System.Byte[])">computed</see> result as a <see cref="T:System.String">string</see>.
            </summary>
        </member>
        <member name="M:WillPower.FileField.#ctor">
            <summary>
            .ctor. Creates a new instance of FileField.
            </summary>
        </member>
        <member name="M:WillPower.FileField.#ctor(WillPower.IFileField)">
            <summary>
            .ctor. Creates a new instance of FileField.
            </summary>
            <param name="clone">The source <see cref="T:WillPower.IFileField">field</see> to clone.</param>
        </member>
        <member name="M:WillPower.FileField.#ctor(WillPower.IFileField,System.Byte[])">
            <summary>
            .ctor. Creates a new instance of FileField.
            </summary>
            <param name="clone">The source <see cref="T:WillPower.IFileField">field</see> to clone.</param>
            <param name="data">The <see cref="T:System.Array">array</see> of bytes to read.</param>
        </member>
        <member name="M:WillPower.FileField.#ctor(WillPower.IFileParserEncoder,System.Type,System.String,System.UInt32,System.UInt32,WillPower.FileFieldDataFormat)">
            <summary>
            .ctor. Creates a new instance of FileField.
            </summary>
            <param name="encoder">The <see cref="T:WillPower.IFileParserEncoder">IFileParserEncoder</see> instance to use for encoding.</param>
            <param name="type">The <see cref="T:System.Type">type</see> of data the field contains.</param>
            <param name="name">The <see cref="T:System.String">name</see> of the field.</param>
            <param name="startPosition">The starting position of this field in the <see cref="T:WillPower.IFileRecord">record</see> 
            expressed as an <see cref="T:System.UInt32">unsigned integer</see>.</param>
            <param name="length">The field length expressed as an <see cref="T:System.UInt32">unsigned integer</see>.</param>
            <param name="format">The <see cref="T:WillPower.FileFieldDataFormat">format</see> of the field.</param>
        </member>
        <member name="M:WillPower.FileField.#ctor(WillPower.FileParserEncoder,System.String,System.UInt32,System.UInt32,WillPower.FileFieldDataFormat,System.Byte,System.Boolean)">
            <summary>
            .ctor. Creates a new instance of FileField. Used for numeric <see cref="T:System.Decimal">(decimal)</see> <see cref="T:System.Type">types</see>.
            </summary>
            <param name="encoder">The <see cref="T:WillPower.IFileParserEncoder">IFileParserEncoder</see> instance to use for encoding.</param>
            <param name="name">The <see cref="T:System.String">name</see> of the field.</param>
            <param name="startPosition">The starting position of this field in the <see cref="T:WillPower.IFileRecord">record</see> 
            expressed as an <see cref="T:System.UInt32">unsigned integer</see>.</param>
            <param name="length">The field length expressed as an <see cref="T:System.UInt32">unsigned integer</see>.</param>
            <param name="format">The <see cref="T:WillPower.FileFieldDataFormat">format</see> of the field.</param>
            <param name="precision">The precision of the expected resultant as <see cref="T:System.Byte"/>Byte. Default is 0. 
            The limitation is from logical reasons.</param>
            <param name="required">If <see cref="T:System.Boolean">true</see>, throw a <see cref="T:WillPower.FieldException"></see> on a null result.</param>
        </member>
        <member name="M:WillPower.FileField.#ctor(WillPower.FileParserEncoder,System.String,System.UInt32,System.UInt32,WillPower.FileFieldDataFormat,System.Boolean,System.Boolean)">
            <summary>
            .ctor. Creates a new instance of FileField. Used for <see cref="T:System.DateTime">Date</see> <see cref="T:System.Type">types</see>.
            </summary>
            <param name="encoder">The <see cref="T:WillPower.IFileParserEncoder">IFileParserEncoder</see> instance to use for encoding.</param>
            <param name="name">The <see cref="T:System.String">name</see> of the field.</param>
            <param name="startPosition">The starting position of this field in the <see cref="T:WillPower.IFileRecord">record</see> 
            expressed as an <see cref="T:System.UInt32">unsigned integer</see>.</param>
            <param name="length">The field length expressed as an <see cref="T:System.UInt32">unsigned integer</see>.</param>
            <param name="format">The <see cref="T:WillPower.FileFieldDataFormat">format</see> of the field.</param>
            <param name="yearFirst">If <see cref="T:System.Boolean">true</see> it assumes the year is the first part of the string. 
            Default is <see cref="T:System.Boolean">false</see>.
            Note: If the <see cref="T:System.String">string</see> contains a parsable date character ( / or - ) it will attempt to use 
            <see cref="M:System.DateTime.TryParse(System.String,System.DateTime@)">TryParse</see> and return any successful result. 
            If <see cref="M:System.DateTime.TryParse(System.String,System.DateTime@)">TryParse</see> fails it proceeds on to <see cref="T:System.String">string</see> parsing.
            </param>
            <param name="required">If <see cref="T:System.Boolean">true</see>, throw a <see cref="T:WillPower.FieldException"></see> on a null result.</param>
        </member>
        <member name="M:WillPower.FileField.Compute(System.Byte[])">
            <summary>
            Computes this provided <see cref="T:System.Array">array</see> of bytes using the properties provided.
            </summary>
            <param name="data">The <see cref="T:System.Array">array</see> of bytes to process.</param>
        </member>
        <member name="T:WillPower.FileLayout">
            <summary>
            The <see cref="T:WillPower.IFileLayout">layout</see> of the file, including any <see cref="P:WillPower.IFileLayout.HeaderRecord">header</see>, 
            <see cref="P:WillPower.IFileLayout.FooterRecord">footer</see>, or <see cref="P:WillPower.IFileLayout.Conditions">conditional</see> rows.
            For binary files the <see cref="P:WillPower.IFileLayout.RecordLength">RecordLength</see> must be greater than 0.
            For text files the default <see cref="P:WillPower.IFileLayout.TextLineTerminator">TextLineTerminator</see> is '\n' (nextline), but can be set at any time.
            Implements <see cref="T:WillPower.IFileLayout">IFileLayout</see>. Cannot be inherited.
            </summary>
        </member>
        <member name="P:WillPower.FileLayout.Name">
            <summary>
            The <see cref="T:System.String">name</see> of this layout, for reference.
            </summary>
        </member>
        <member name="P:WillPower.FileLayout.Encoder">
            <summary>
            The <see cref="T:WillPower.IFileParserEncoder">IFileParserEncoder</see> instance to use for encoding.
            </summary>
        </member>
        <member name="P:WillPower.FileLayout.Conditions">
            <summary>
            The <see cref="T:System.Array">collection</see> of <see cref="T:WillPower.IFileConditional">conditions</see> to evaulate each <see cref="T:WillPower.IFileRecord">record</see> for (and apply those fields if true), if any.
            </summary>
        </member>
        <member name="P:WillPower.FileLayout.HeaderRecord">
            <summary>
            The Header <see cref="T:WillPower.IFileRecord">record</see> template, if any.
            </summary>
        </member>
        <member name="P:WillPower.FileLayout.FooterRecord">
            <summary>
            The Footer <see cref="T:WillPower.IFileRecord">record</see> template, if any.
            </summary>
        </member>
        <member name="P:WillPower.FileLayout.MasterFields">
            <summary>
            The <see cref="T:System.Array">collection</see> of <see cref="T:WillPower.IFileField">fields</see> containing either master key fields (3D file), or all fields (2D file).
            </summary>
        </member>
        <member name="P:WillPower.FileLayout.RecordLength">
            <summary>
            The length of each record expressed as an <see cref="T:System.UInt32">unsigned integer</see>.
            </summary>
        </member>
        <member name="P:WillPower.FileLayout.OpenAsText">
            <summary>
            If <see cref="T:System.Boolean">true</see>, open using character-based methods. If <see cref="T:System.Boolean">false</see>, open using binary methods.
            </summary>
        </member>
        <member name="P:WillPower.FileLayout.TextLineTerminator">
            <summary>
            The <see cref="T:System.Char">character</see> used to determine end of line when 
            <see cref="P:WillPower.IFileLayout.OpenAsText">OpenAsText</see> is <see cref="T:System.Boolean">true</see>.
            For text files the default is '\n' (nextline), but can be set at any time.
            </summary>
        </member>
        <member name="M:WillPower.FileLayout.#ctor">
            <summary>
            .ctor. Creates a new instance of FileLayout.
            </summary>
        </member>
        <member name="M:WillPower.FileLayout.#ctor(WillPower.IFileParserEncoder)">
            <summary>
            .ctor. Creates a new instance of FileLayout.
            </summary>
            <param name="encoder">The <see cref="T:WillPower.IFileParserEncoder">IFileParserEncoder</see> instance to use for encoding.</param>
        </member>
        <member name="T:WillPower.FileParser">
            <summary>
            A concrete class for file parsing. Cannot be inherited.
            </summary>
        </member>
        <member name="P:WillPower.FileParser.Records">
            <summary>
            The <see cref="T:System.Collections.Generic.IEnumerable`1">collection</see> of <see cref="T:WillPower.IFileRecord">records</see> read from the file.
            </summary>
        </member>
        <member name="M:WillPower.FileParser.#ctor">
            <summary>
            .ctor. Creates a new instance of FileParser using the default <see cref="T:WillPower.FileParserEncoder">FileParserEncoder</see>.
            </summary>
        </member>
        <member name="M:WillPower.FileParser.#ctor(WillPower.IFileParserEncoder)">
            <summary>
            .ctor. Creates a new instance of FileParser.
            </summary>
            <param name="encoder">The <see cref="T:WillPower.IFileParserEncoder">IFileParserEncoder</see> instance to use for encoding.</param>
        </member>
        <member name="M:WillPower.FileParser.#ctor(WillPower.IFileLayout)">
            <summary>
            .ctor. Creates a new instance of FileParser.
            </summary>
            <param name="layout">The <see cref="T:WillPower.IFileLayout">layout</see> instance to use for processing.</param>
        </member>
        <member name="M:WillPower.FileParser.LoadStream(System.IO.Stream)">
            <summary>
            Load the provided <see cref="T:System.IO.Stream">stream</see> into the parser.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream">stream</see> to load.</param>
        </member>
        <member name="T:WillPower.FileParserEncoder">
            <summary>
            A concrete class for containing the necessary <see cref="T:System.Text.Encoding">Encoding</see> properties to parse a file.
            </summary>
        </member>
        <member name="P:WillPower.FileParserEncoder.SourceEncoding">
            <summary>
            The <see cref="T:System.Text.Encoding">Encoding</see> the anticipated input is in.
            Default is <see cref="P:WillPower.Encodings.EBCDIC">EBCDIC</see>, or IBM binary and text encoding.
            </summary>
        </member>
        <member name="P:WillPower.FileParserEncoder.DestinationEncoding">
            <summary>
            The <see cref="T:System.Text.Encoding">Encoding</see> the expected output should be in.
            Default is <see cref="P:System.Text.Encoding.ASCII">ASCII</see>.
            </summary>
        </member>
        <member name="T:WillPower.FileRecord">
            <summary>
            A concrete class for record-level data, their <see cref="T:WillPower.IFileField">fields</see>, and any possible <see cref="T:WillPower.FieldException">Exceptions</see>.
            </summary>
        </member>
        <member name="P:WillPower.FileRecord.Exceptions">
            <summary>
            The <see cref="T:System.Array">collection</see> of <see cref="T:WillPower.FieldException">Exceptions</see>, if any.
            </summary>
        </member>
        <member name="M:WillPower.FileRecord.#ctor(WillPower.IFileParserEncoder)">
            <summary>
            .ctor. Creates a new instance of FileRecord.
            </summary>
            <param name="encoder">The <see cref="T:WillPower.IFileParserEncoder">IFileParserEncoder</see> instance to utilize for processing.</param>
        </member>
        <member name="M:WillPower.FileRecord.#ctor(WillPower.IFileField[])">
            <summary>
            .ctor. Creates a new instance of FileRecord. Will use the <see cref="T:WillPower.IFileParserEncoder">IFileParserEncoder</see> 
            instance of the first <see cref="T:WillPower.IFileField">field</see> (Fields[0]).
            </summary>
            <param name="fields">
            The <see cref="T:System.Array">collection</see> of <see cref="T:WillPower.IFileField">fields</see> belonging to this <see cref="T:WillPower.IFileRecord">record</see>.
            </param>
        </member>
        <member name="M:WillPower.FileRecord.#ctor(WillPower.IFileField[],System.Byte[])">
            <summary>
            .ctor. Creates a new instance of FileRecord. Will use the <see cref="T:WillPower.IFileParserEncoder">IFileParserEncoder</see> 
            instance of the first <see cref="T:WillPower.IFileField">field</see> (Fields[0]).
            </summary>
            <param name="fields">
            The <see cref="T:System.Array">collection</see> of <see cref="T:WillPower.IFileField">fields</see> belonging to this <see cref="T:WillPower.IFileRecord">record</see>.
            </param>
            <param name="data">The <see cref="T:System.Array">array</see> of bytes to <see cref="M:WillPower.IFileRecord.ReadRecord(System.Byte[])">read</see> into this instance.</param>
        </member>
        <member name="M:WillPower.FileRecord.#ctor(WillPower.IFileRecord,WillPower.IFileConditional,System.Byte[])">
            <summary>
            .ctor. Creates a new instance of FileRecord as a dereferenced copy of the <see cref="T:WillPower.IFileRecord">clone</see> provided.
            </summary>
            <param name="clone">The <see cref="T:WillPower.IFileRecord">record</see> to copy as a template for this record (or clone).</param>
            <param name="condition"></param>
            <param name="data"></param>
        </member>
        <member name="M:WillPower.FileRecord.ReadRecord(System.Byte[])">
            <summary>
            Reads an <see cref="T:System.Array">array</see> of bytes into this instance.
            </summary>
            <param name="data">The <see cref="T:System.Array">array</see> of bytes to read.</param>
        </member>
        <member name="T:WillPower.FileTable">
            <summary>
            A table field that functions more or less like a miniature file reader within a record.
            Can be inherited.
            </summary>
        </member>
        <member name="P:WillPower.FileTable.Encoder">
            <summary>
            The <see cref="T:WillPower.IFileParserEncoder">IFileParserEncoder</see> instance to use for encoding.
            </summary>
        </member>
        <member name="P:WillPower.FileTable.StartPosition">
            <summary>
            The starting position of this field in the <see cref="T:WillPower.IFileRecord">record</see> expressed as an <see cref="T:System.UInt32">unsigned integer</see>.
            </summary>
        </member>
        <member name="P:WillPower.FileTable.Length">
            <summary>
            The table length expressed as an <see cref="T:System.UInt32">unsigned integer</see>.
            </summary>
        </member>
        <member name="P:WillPower.FileTable.Name">
            <summary>
            The <see cref="T:System.String">name</see> of the table.
            </summary>
        </member>
        <member name="P:WillPower.FileTable.DataFormat">
            <summary>
            The <see cref="T:WillPower.FileFieldDataFormat">format</see> of Table (3).
            </summary>
        </member>
        <member name="P:WillPower.FileTable.Layout">
            <summary>
            The <see cref="T:WillPower.IFileLayout">layout</see> of the table.
            </summary>
        </member>
        <member name="P:WillPower.FileTable.Records">
            <summary>
            The <see cref="T:System.Collections.Generic.IEnumerable`1">collection</see> of <see cref="T:WillPower.IFileRecord">records</see> read from the table.
            </summary>
        </member>
        <member name="P:WillPower.FileTable.Value">
            <summary>
            The <see cref="M:WillPower.IFileField.Compute(System.Byte[])">computed</see> value boxed as an <see cref="T:System.Object">object</see>.
            </summary>
        </member>
        <member name="P:WillPower.FileTable.Type">
            <summary>
            The <see cref="T:System.Type">type</see> of this instance.
            </summary>
        </member>
        <member name="P:WillPower.FileTable.Precision">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="P:WillPower.FileTable.YearFirst">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="P:WillPower.FileTable.ByteValue">
            <summary>
            The original, source <see cref="T:System.Text.Encoding">Encoded</see> <see cref="T:System.Array">array</see> of 
            <see cref="T:System.Byte">bytes</see> belonging to this field.
            </summary>
        </member>
        <member name="P:WillPower.FileTable.StringValue">
            <summary>
            The <see cref="M:WillPower.IFileField.Compute(System.Byte[])">computed</see> result as a <see cref="T:System.String">string</see>.
            For this object, this field will not return viable results.
            </summary>
        </member>
        <member name="M:WillPower.FileTable.#ctor(WillPower.IFileParserEncoder)">
            <summary>
            .ctor. Creates a new instance of FileTable.
            </summary>
            <param name="encoder">The <see cref="T:WillPower.IFileParserEncoder">IFileParserEncoder</see> instance to use for encoding.</param>
        </member>
        <member name="M:WillPower.FileTable.#ctor(WillPower.IFileParserEncoder,System.String,System.UInt32,System.UInt32)">
            <summary>
            .ctor. Creates a new instance of FileTable.
            </summary>
            <param name="encoder">The <see cref="T:WillPower.IFileParserEncoder">IFileParserEncoder</see> instance to use for encoding.</param>
            <param name="name">The <see cref="T:System.String">name</see> of the table.</param>
            <param name="startPosition">The starting position of this table in the <see cref="T:WillPower.IFileRecord">record</see> 
            expressed as an <see cref="T:System.UInt32">unsigned integer</see>.</param>
            <param name="length">The field (table) length expressed as an <see cref="T:System.UInt32">unsigned integer</see>.</param>
        </member>
        <member name="M:WillPower.FileTable.Compute(System.Byte[])">
            <summary>
            Computes the provided <see cref="T:System.Array">array</see> of bytes using the properties provided.
            </summary>
            <param name="data">The <see cref="T:System.Array">array</see> of bytes to process.</param>
        </member>
        <member name="M:WillPower.FileTable.ToDataTable">
            <summary>
            Creates a <see cref="T:System.Data.DataTable">DataTable</see> from the resulting <see cref="T:WillPower.IFileRecord">records</see>.
            </summary>
            <returns>A <see cref="T:System.Data.DataTable">DataTable</see> of the <see cref="T:WillPower.IFileRecord">records</see> computed.</returns>
        </member>
        <member name="T:WillPower.TaskManager">
            <summary>
            A class for managing active tasks without any complex magic.
            Why isn't something like this part of .Net?
            Can be inherited because I was too lazy to make an Interface.
            </summary>
        </member>
        <member name="T:WillPower.TaskManager.OnThreadExceptionHandler">
            <summary>
            The delegate handler for <see cref="E:WillPower.TaskManager.OnThreadException">OnThreadException</see>.
            </summary>
            <param name="sender"><see cref="T:WillPower.TaskManager">This</see> instance.</param>
            <param name="exception">The <see cref="T:System.Exception">Exception</see> thrown.</param>
            <param name="action">The relevant <see cref="T:WillPower.AbortableTask">AbortableTask</see>, if any.</param>
        </member>
        <member name="E:WillPower.TaskManager.OnThreadException">
            <summary>
            Fires when a <see cref="P:WillPower.TaskManager.PendingTasks">Pending Task</see> is fails to execute.
            If this event is not handled, an unhandled <see cref="T:System.Exception">Exception</see> could 
            be thrown in the background thread and should be handled elsewhere.
            </summary>
        </member>
        <member name="P:WillPower.TaskManager.TimeOut">
            <summary>
            The <see cref="T:System.TimeSpan">System.TimeSpan</see> to wait for an available thread prior to throwing a 
            <see cref="T:System.TimeoutException">TimeoutException</see>.
            Default is 10 seconds.
            </summary>
        </member>
        <member name="P:WillPower.TaskManager.TimeOutAll">
            <summary>
            The <see cref="T:System.TimeSpan">System.TimeSpan</see> to wait for all threads to complete prior to throwing a 
            <see cref="T:System.TimeoutException">TimeoutException</see>.
            Default is 1 hour (60 minutes).
            </summary>
        </member>
        <member name="P:WillPower.TaskManager.MaximumConcurrency">
            <summary>
            The default <see cref="T:System.Threading.Tasks.TaskScheduler">TaskScheduler</see> of the 
            <see cref="T:System.Threading.Tasks.TaskFactory">TaskFactory's</see> <see cref="P:System.Threading.Tasks.TaskScheduler.MaximumConcurrencyLevel">
            MaximumConcurrencyLevel</see> as an <see cref="T:System.UInt32">unsigned integer</see>.
            </summary>
        </member>
        <member name="P:WillPower.TaskManager.TaskFactory">
            <summary>
            The <see cref="P:WillPower.TaskManager.TaskFactory">System.Threading.Tasks.TaskFactory</see> instance used for instantiating tasks.
            </summary>
        </member>
        <member name="P:WillPower.TaskManager.Tasks">
            <summary>
            The <see cref="T:System.Collections.Generic.List`1">collection</see> of <see cref="T:WillPower.AbortableTask">Tasks</see> currently loaded.
            </summary>
        </member>
        <member name="P:WillPower.TaskManager.CanceledTasks">
            <summary>
            The <see cref="T:System.Collections.Generic.List`1">collection</see> of <see cref="T:WillPower.AbortableTask">Tasks</see> with a Canceled status.
            </summary>
        </member>
        <member name="P:WillPower.TaskManager.FaultedTasks">
            <summary>
            The <see cref="T:System.Collections.Generic.List`1">collection</see> of <see cref="T:WillPower.AbortableTask">Tasks</see> with a Faulted status.
            </summary>
        </member>
        <member name="P:WillPower.TaskManager.CompletedTasks">
            <summary>
            The <see cref="T:System.Collections.Generic.List`1">collection</see> of <see cref="T:WillPower.AbortableTask">Tasks</see> with a Completed status.
            </summary>
        </member>
        <member name="P:WillPower.TaskManager.RunningTasks">
            <summary>
            The <see cref="T:System.Collections.Generic.List`1">collection</see> of <see cref="T:WillPower.AbortableTask">Tasks</see> with a Running status.
            </summary>
        </member>
        <member name="P:WillPower.TaskManager.PendingTasks">
            <summary>
            The <see cref="T:System.Collections.Generic.List`1">List</see> of <see cref="T:WillPower.AbortableTask">Tasks</see> awaiting execution.
            </summary>
        </member>
        <member name="P:WillPower.TaskManager.HasActiveTasks">
            <summary>
            Returns <see cref="T:System.Boolean">true</see> if <see cref="P:WillPower.TaskManager.RunningTasks">RunningTasks</see> has one or more items.
            </summary>
        </member>
        <member name="M:WillPower.TaskManager.#ctor">
            <summary>
            .ctor. Creates a new instance of TaskManager.
            </summary>
        </member>
        <member name="M:WillPower.TaskManager.StartAction(System.Action)">
            <summary>
            Starts the <see cref="T:System.Action">action</see> using <see cref="P:WillPower.TaskManager.TaskFactory">TaskFactory</see> 
            and adds it to the <see cref="P:WillPower.TaskManager.Tasks">Tasks</see> collection or the 
            <see cref="P:WillPower.TaskManager.PendingTasks">PendingTasks</see> collection if no threads are available.
            </summary>
            <param name="action">The <see cref="T:System.Action">action</see> to be executed.</param>
        </member>
        <member name="M:WillPower.TaskManager.StartAction(System.Action,System.Threading.CancellationTokenSource)">
            <summary>
            Starts the <see cref="T:System.Action">action</see> using <see cref="P:WillPower.TaskManager.TaskFactory">TaskFactory</see> 
            and adds it to the <see cref="P:WillPower.TaskManager.Tasks">Tasks</see> collection or the 
            <see cref="P:WillPower.TaskManager.PendingTasks">PendingTasks</see> collection if no threads are available
            using the provided <see cref="T:System.Threading.CancellationTokenSource">CancellationTokenSource</see>.
            </summary>
            <param name="action">The <see cref="T:System.Action">action</see> to be executed.</param>
            <param name="cancellationTokenSource">The <see cref="T:System.Threading.CancellationTokenSource">source</see> of the <see cref="T:System.Threading.CancellationToken">CancellationToken</see>.</param>
        </member>
        <member name="M:WillPower.TaskManager.StartTask(WillPower.AbortableTask)">
            <summary>
            Starts the <see cref="T:WillPower.AbortableTask">Task</see> using <see cref="P:WillPower.TaskManager.TaskFactory">TaskFactory</see> 
            and adds it to the <see cref="P:WillPower.TaskManager.Tasks">Tasks</see> collection or the 
            <see cref="P:WillPower.TaskManager.PendingTasks">PendingTasks</see> collection if no threads are available.
            </summary>
            <param name="task"></param>
        </member>
        <member name="M:WillPower.TaskManager.StartTask(System.Threading.Tasks.Task)">
            <summary>
            Starts the <see cref="T:System.Threading.Tasks.Task">Task</see> using <see cref="P:WillPower.TaskManager.TaskFactory">TaskFactory</see> 
            and adds it to the <see cref="P:WillPower.TaskManager.Tasks">Tasks</see> collection or the 
            <see cref="P:WillPower.TaskManager.PendingTasks">PendingTasks</see> collection if no threads are available.
            </summary>
            <param name="task">The <see cref="T:System.Threading.Tasks.Task">Task</see> to be executed.</param>
        </member>
        <member name="M:WillPower.TaskManager.StartTask(System.Threading.Tasks.Task,System.Threading.CancellationTokenSource)">
            <summary>
            Starts the <see cref="T:System.Threading.Tasks.Task">Task</see> using <see cref="P:WillPower.TaskManager.TaskFactory">TaskFactory</see> 
            and adds it to the <see cref="P:WillPower.TaskManager.Tasks">Tasks</see> collection or the 
            <see cref="P:WillPower.TaskManager.PendingTasks">PendingTasks</see> collection if no threads are available
            using the provided <see cref="T:System.Threading.CancellationTokenSource">CancellationTokenSource</see>.
            </summary>
            <param name="task">The <see cref="T:System.Threading.Tasks.Task">Task</see> to be executed.</param>
            <param name="cancellationTokenSource">The <see cref="T:System.Threading.CancellationTokenSource">source</see> of the <see cref="T:System.Threading.CancellationToken">CancellationToken</see>.</param>
        </member>
        <member name="M:WillPower.TaskManager.CleanTasks">
            <summary>
            Removes all <see cref="P:WillPower.TaskManager.Tasks">Tasks</see> that are no longer running.
            </summary>
        </member>
        <member name="M:WillPower.TaskManager.AwaitAll">
            <summary>
            Awaits all tasks (or <see cref="P:WillPower.TaskManager.TimeOutAll">TimeOutAll</see> elapses).
            </summary>
        </member>
        <member name="M:WillPower.TaskManager.AwaitAllThenClean">
            <summary>
            Awaits all tasks (or <see cref="P:WillPower.TaskManager.TimeOutAll">TimeOutAll</see> elapses) and removes them from the 
            <see cref="P:WillPower.TaskManager.Tasks">Tasks</see> collection.
            See <see cref="M:WillPower.TaskManager.AwaitAll">AwaitAll</see> and <see cref="M:WillPower.TaskManager.CleanTasks">CleanTasks</see>.
            </summary>
        </member>
        <member name="M:WillPower.TaskManager.Dispose">
            <summary>
            Safely <see cref="T:System.IDisposable">Disposes</see> of this instance and all child <see cref="T:WillPower.AbortableTask">Tasks</see>.
            </summary>
        </member>
        <member name="T:WillPower.IFileConditional">
            <summary>
            An interface to encapsulate expected functionality to determine an action.
            </summary>
        </member>
        <member name="P:WillPower.IFileConditional.Name">
            <summary>
            The <see cref="T:System.String">name</see> of this condition, for reference.
            </summary>
        </member>
        <member name="P:WillPower.IFileConditional.Fields">
            <summary>
            The collection of fields <see cref="T:WillPower.IFileField">fields</see> containing clones of the fields to evaluate.
            </summary>
        </member>
        <member name="P:WillPower.IFileConditional.Condition">
            <summary>
            <see cref="T:System.Func`2">Func<![CDATA[<]]></see><see cref="T:WillPower.IFileRecord">IFileRecord</see>
            <see cref="T:System.Func`2">, bool<![CDATA[>]]></see>: A method to evaluate a <see cref="T:WillPower.IFileRecord">record</see> 
            and return <see cref="T:System.Boolean">true</see> or <see cref="T:System.Boolean">false</see> to determine some action.
            <example>
            <![CDATA[
            inline:
            
                MyFileConditional.Condition = record => record.Get<string>("Field3") == "C";
            
            delegate:
            
                MyFileConditional.Condition = CheckForField3C;
            ...
                private bool CheckForField3C(IFileRecord record)
                {
                    return record.Get<string>("Field3") == "C";
                }
                
            ]]>
            </example>
            </summary>
        </member>
        <member name="M:WillPower.IFileConditional.IsConditional(WillPower.IFileRecord)">
            <summary>
            Evaluates the provided <see cref="T:WillPower.IFileRecord">record</see> against the <see cref="P:WillPower.IFileConditional.Condition">Condition</see> property.
            </summary>
            <param name="record">The <see cref="T:WillPower.IFileRecord">record</see> to evaluate against the <see cref="P:WillPower.IFileConditional.Condition">Condition</see> property.</param>
            <returns>True if the <see cref="T:WillPower.IFileRecord">record</see> meets the <see cref="P:WillPower.IFileConditional.Condition">Condition</see> property.</returns>
        </member>
        <member name="T:WillPower.IFileField">
            <summary>
            A common Interface containing the necessary properties and methods for processing a single field.
            </summary>
        </member>
        <member name="P:WillPower.IFileField.Encoder">
            <summary>
            The <see cref="T:WillPower.IFileParserEncoder">IFileParserEncoder</see> instance to use for encoding.
            </summary>
        </member>
        <member name="P:WillPower.IFileField.StartPosition">
            <summary>
            The starting position of this field in the <see cref="T:WillPower.IFileRecord">record</see> expressed as an <see cref="T:System.UInt32">unsigned integer</see>.
            </summary>
        </member>
        <member name="P:WillPower.IFileField.Length">
            <summary>
            The field length expressed as an <see cref="T:System.UInt32">unsigned integer</see>.
            </summary>
        </member>
        <member name="P:WillPower.IFileField.Name">
            <summary>
            The <see cref="T:System.String">name</see> of the field.
            </summary>
        </member>
        <member name="P:WillPower.IFileField.DataFormat">
            <summary>
            The <see cref="T:WillPower.FileFieldDataFormat">format</see> of the field.
            String = 0, Comp3 (IBM Packed Number) = 1, Raw (binary) = 2, Table = 3.
            </summary>
        </member>
        <member name="P:WillPower.IFileField.Value">
            <summary>
            The <see cref="M:WillPower.IFileField.Compute(System.Byte[])">computed</see> value boxed as an <see cref="T:System.Object">object</see>.
            </summary>
        </member>
        <member name="P:WillPower.IFileField.Type">
            <summary>
            The <see cref="T:System.Type">type</see> of data the field contains.
            </summary>
        </member>
        <member name="P:WillPower.IFileField.Precision">
            <summary>
            The precision of the value if decimal.
            </summary>
        </member>
        <member name="P:WillPower.IFileField.YearFirst">
            <summary>
            If <see cref="T:System.Boolean">true</see> and the <see cref="P:WillPower.IFileField.DataFormat">DataFormat</see> is set to String (0), 
            will attempt to read the date value with year at the beginning.
            </summary>
        </member>
        <member name="P:WillPower.IFileField.ByteValue">
            <summary>
            The original, source <see cref="T:System.Text.Encoding">Encoded</see> <see cref="T:System.Array">array</see> of bytes belonging to this field.
            </summary>
        </member>
        <member name="P:WillPower.IFileField.StringValue">
            <summary>
            The <see cref="M:WillPower.IFileField.Compute(System.Byte[])">computed</see> result as a <see cref="T:System.String">string</see>.
            </summary>
        </member>
        <member name="M:WillPower.IFileField.Compute(System.Byte[])">
            <summary>
            Computes the provided <see cref="T:System.Array">array</see> of bytes using the properties provided.
            </summary>
            <param name="data">The <see cref="T:System.Array">array</see> of bytes to process.</param>
        </member>
        <member name="T:WillPower.IFileLayout">
            <summary>
            The layout of the file, including any <see cref="P:WillPower.IFileLayout.HeaderRecord">header</see>, 
            <see cref="P:WillPower.IFileLayout.FooterRecord">footer</see>, or <see cref="P:WillPower.IFileLayout.Conditions">conditional</see> rows.
            For binary files the <see cref="P:WillPower.IFileLayout.RecordLength">RecordLength</see> must be greater than 0.
            For text files the default <see cref="P:WillPower.IFileLayout.TextLineTerminator">TextLineTerminator</see> is typically '\n' (nextline), but can be set at any time.
            </summary>
        </member>
        <member name="P:WillPower.IFileLayout.Name">
            <summary>
            The <see cref="T:System.String">name</see> of this layout, for reference.
            </summary>
        </member>
        <member name="P:WillPower.IFileLayout.Encoder">
            <summary>
            The <see cref="T:WillPower.IFileParserEncoder">IFileParserEncoder</see> instance to use for encoding.
            </summary>
        </member>
        <member name="P:WillPower.IFileLayout.Conditions">
            <summary>
            The <see cref="T:System.Array">collection</see> of <see cref="T:WillPower.IFileConditional">conditions</see> to evaulate each <see cref="T:WillPower.IFileRecord">record</see> for (and apply those fields if true), if any.
            </summary>
        </member>
        <member name="P:WillPower.IFileLayout.HeaderRecord">
            <summary>
            The Header <see cref="T:WillPower.IFileRecord">record</see> template, if any.
            </summary>
        </member>
        <member name="P:WillPower.IFileLayout.FooterRecord">
            <summary>
            The Footer <see cref="T:WillPower.IFileRecord">record</see> template, if any.
            </summary>
        </member>
        <member name="P:WillPower.IFileLayout.MasterFields">
            <summary>
            The <see cref="T:System.Array">collection</see> of <see cref="T:WillPower.IFileField">fields</see> containing either master key fields (3D file), or all fields (2D file).
            </summary>
        </member>
        <member name="P:WillPower.IFileLayout.RecordLength">
            <summary>
            The length of each record expressed as an <see cref="T:System.UInt32">unsigned integer</see>.
            </summary>
        </member>
        <member name="P:WillPower.IFileLayout.OpenAsText">
            <summary>
            If <see cref="T:System.Boolean">true</see>, open using character-based methods. If <see cref="T:System.Boolean">false</see>, open using binary methods.
            </summary>
        </member>
        <member name="P:WillPower.IFileLayout.TextLineTerminator">
            <summary>
            The <see cref="T:System.Char">character</see> used to determine end of line when <see cref="P:WillPower.IFileLayout.OpenAsText">OpenAsText</see> is <see cref="T:System.Boolean">true</see>.
            </summary>
        </member>
        <member name="T:WillPower.IFileParser">
            <summary>
            A common Interface for a file parsing engine.
            </summary>
        </member>
        <member name="P:WillPower.IFileParser.Layout">
            <summary>
            The <see cref="T:WillPower.IFileLayout">layout</see> of the file, including any <see cref="P:WillPower.IFileLayout.HeaderRecord">header</see>, 
            <see cref="P:WillPower.IFileLayout.FooterRecord">footer</see>, or <see cref="P:WillPower.IFileLayout.Conditions">conditional</see> rows.
            For binary files the <see cref="P:WillPower.IFileLayout.RecordLength">RecordLength</see> must be greater than 0.
            For text files the default <see cref="P:WillPower.IFileLayout.TextLineTerminator">TextLineTerminator</see> is typically '\n' (nextline), but can be set at any time.
            </summary>
        </member>
        <member name="P:WillPower.IFileParser.Records">
            <summary>
            The <see cref="T:System.Collections.Generic.IEnumerable`1">collection</see> of <see cref="T:WillPower.IFileRecord">records</see> read from the file.
            </summary>
        </member>
        <member name="P:WillPower.IFileParser.TaskManager">
            <summary>
            The <see cref="T:WillPower.TaskManager">TaskManager</see> instance managing threads.
            </summary>
        </member>
        <member name="M:WillPower.IFileParser.LoadFile(System.String)">
            <summary>
            Load the provided file as specified by <see cref="T:System.String">fileName</see> into the parser.
            </summary>
            <param name="fileName">The <see cref="T:System.String">name</see> of the file to load.</param>
        </member>
        <member name="M:WillPower.IFileParser.LoadStream(System.IO.Stream)">
            <summary>
            Load the provided <see cref="T:System.IO.Stream">stream</see> into the parser.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream">stream</see> to load.</param>
        </member>
        <member name="M:WillPower.IFileParser.ToDataSet">
            <summary>
            Creates a <see cref="T:System.Data.DataSet">DataSet</see> containing <see cref="T:System.Data.DataTable">DataTables</see> 
            for each conditional record type, header, footer, and/or master recordset.
            </summary>
            <returns>A <see cref="T:System.Data.DataSet">DataSet</see> of <see cref="T:System.Data.DataTable">DataTables</see> with resulting data.</returns>
        </member>
        <member name="T:WillPower.IFileParserEncoder">
            <summary>
            An Interface for containing the necessary <see cref="T:System.Text.Encoding">Encoding</see> properties to parse a file.
            </summary>
        </member>
        <member name="P:WillPower.IFileParserEncoder.SourceEncoding">
            <summary>
            The <see cref="T:System.Text.Encoding">Encoding</see> the anticipated input is in.
            </summary>
        </member>
        <member name="P:WillPower.IFileParserEncoder.DestinationEncoding">
            <summary>
            The <see cref="T:System.Text.Encoding">Encoding</see> the expected output should be in.
            </summary>
        </member>
        <member name="T:WillPower.IFileRecord">
            <summary>
            A common interface for record-level data, their <see cref="T:WillPower.IFileField">fields</see>, and any possible <see cref="T:WillPower.FieldException">Exceptions</see>.
            </summary>
        </member>
        <member name="P:WillPower.IFileRecord.Encoder">
            <summary>
            The <see cref="T:WillPower.IFileParserEncoder">IFileParserEncoder</see> instance to utilize for processing.
            </summary>
        </member>
        <member name="P:WillPower.IFileRecord.Fields">
            <summary>
            The <see cref="T:System.Array">collection</see> of <see cref="T:WillPower.IFileField">fields</see> belonging to this <see cref="T:WillPower.IFileRecord">record</see>.
            </summary>
        </member>
        <member name="P:WillPower.IFileRecord.Exceptions">
            <summary>
            The <see cref="T:System.Array">collection</see> of <see cref="T:WillPower.FieldException">Exceptions</see>, if any.
            </summary>
        </member>
        <member name="M:WillPower.IFileRecord.ReadRecord(System.Byte[])">
            <summary>
            Reads an <see cref="T:System.Array">array</see> of bytes into this instance.
            </summary>
            <param name="data">The <see cref="T:System.Array">array</see> of bytes to read.</param>
        </member>
        <member name="M:WillPower.IFileRecord.Get(System.String)">
            <summary>
            Returns the value of the <see cref="T:WillPower.IFileField">field</see> having the provided <see cref="T:System.String">name</see> 
            as an <see cref="T:System.Object">object</see>.
            </summary>
            <param name="fieldName">The <see cref="T:System.String">name</see> of the <see cref="T:WillPower.IFileField">field</see>.</param>
            <returns>The value of the <see cref="T:WillPower.IFileField">field</see> expressed as an <see cref="T:System.Object">object</see>.</returns>
        </member>
        <member name="M:WillPower.IFileRecord.Get``1(System.String)">
            <summary>
            Returns the value of the <see cref="T:WillPower.IFileField">field</see> having the provided <see cref="T:System.String">name</see> 
            (fieldName) as <see cref="T:System.Type">T</see>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fieldName">The <see cref="T:System.String">name</see> of the <see cref="T:WillPower.IFileField">field</see>.</param>
            <returns>The value of the <see cref="T:WillPower.IFileField">field</see> expressed as <see cref="T:System.Type">T</see>.</returns>
        </member>
        <member name="T:WillPower.IO.FileParser.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:WillPower.IO.FileParser.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:WillPower.IO.FileParser.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:WillPower.IO.FileParser.Properties.Resources.InvalidLength">
            <summary>
              Looks up a localized string similar to Length is invalid for this operation..
            </summary>
        </member>
        <member name="P:WillPower.IO.FileParser.Properties.Resources.OverFlow">
            <summary>
              Looks up a localized string similar to Provided value would result in a stack overflow..
            </summary>
        </member>
        <member name="P:WillPower.IO.FileParser.Properties.Resources.ThreadNotAvailable">
            <summary>
              Looks up a localized string similar to The timeout was exceeded before a thread became available..
            </summary>
        </member>
        <member name="P:WillPower.IO.FileParser.Properties.Resources.UnsupportedType">
            <summary>
              Looks up a localized string similar to This type does not support the requested operation..
            </summary>
        </member>
    </members>
</doc>
